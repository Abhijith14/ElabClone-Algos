-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Aug 18, 2020 at 02:03 PM
-- Server version: 10.4.13-MariaDB
-- PHP Version: 7.2.32

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `python`
--

-- --------------------------------------------------------

--
-- Table structure for table `elabdata`
--

CREATE TABLE `elabdata` (
  `id` int(100) NOT NULL,
  `SESSION` varchar(255) DEFAULT NULL,
  `QUESTION_NO` varchar(100) DEFAULT NULL,
  `QUESTION_NAME` varchar(255) DEFAULT NULL,
  `QUESTION_DESC` varchar(3000) DEFAULT NULL,
  `CODE` varchar(5000) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `elabdata`
--

INSERT INTO `elabdata` (`id`, `SESSION`, `QUESTION_NO`, `QUESTION_NAME`, `QUESTION_DESC`, `CODE`) VALUES
(1, 'Input and Output', 'Q. 1:', 'Display the user Address', 'Write a program to read the address of a user. Display the result by breaking it into multiple lines<br>Input and Output Format:<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output', 'n = input()\r\na = input()\r\np = input()\r\nprint(\"Address\")\r\nprint(\"House Number:\",n)\r\nprint(\"Area:\",a)\r\nprint(\"Pin Code:\",p)'),
(2, 'Input and Output', 'Q. 2:', 'Float to Integer', 'Python program to convert  a given float number to integer', 'f = float(input())\r\ni = int(f)\r\nprint(i)'),
(3, 'Input and Output', 'Q. 3:', 'Sum of the Series', 'Write a program to find sum of series<br>Hint:1+2+3+4+n', 'n = int(input())\r\ni = 1\r\ns = 0\r\nwhile i <= n:\r\n  s = s + i\r\n  i+=1\r\nprint(s)'),
(4, 'Input and Output', 'Q. 4:', '100 Years', 'Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year  they will turn 100 years old.', 'curr_Y = 2017\r\nname = input()\r\nage = int(input())\r\ndiff = 100 - age\r\nprint(name,\"will be 100 years old in\",curr_Y + diff)'),
(5, 'Input and Output', 'Q. 5:', 'Convert integer to float', 'Given an input as integer to the machine , he need to get the output of corresponding floating point number<br>Hint: Divide the number by 100 and display the output<br>Please help him to write the program that satisfy the output.', 'n = int(input())\r\nprint(n/100)'),
(6, 'Input and Output', 'Q. 6:', 'Traingle', 'The area of a triangle can be computed using the following formula, where b is the length of the base of the triangle, and h is its height:<br>area = b* h/2<br>Write a program that allows the user to enter values for b and h. The program should then compute and display the area of a triangle with base length b and height h.', 'b = int(input())\r\nh = int(input())\r\nprint(\"The area of the triangle is\",b*h/2)'),
(7, 'Input and Output', 'Q. 7:', 'Salary Calculator', 'Help Raja to calculate a first salary that he got from the organisation , he was confused with an salary credited in his account . <br>He asked his friend Ritu to identify how salary pay got calculated by giving the format of salary.<br>His basic pay (to be entered by user) and Ritu developed a software to calculate the salary pay,with format given as below<br>HRA=80% of the basic pay,<br>dA=40% of basic pay<br>bonus = 25 % of hra <br>Input and Output Format:<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output', 'BP = int(input())\r\nHRA = (80*BP)/100\r\ndA = (40*BP)/100\r\nbonus = (25*HRA)/100\r\nprint(\"Total Salary=\",BP+HRA+dA+bonus)'),
(8, 'Input and Output', 'Q. 8:', 'Bottle Deposits', 'In many jurisdictions a small deposit is added to drink containers to encourage people to recycle them. <br>In one particular jurisdiction, drink containers holding one litre or less have a 0.10 deposit, and drink containers holding more than one litre have a 0.25 deposit.<br>Write a program that reads the number of containers of each size from the user. Your program should continue by computing and displaying the refund that will be received for returning those containers. <br>Format the output so that it includes a rupees and always displays exactly two decimal places.', 'n1 = int(input())\r\nn2 = int(input())\r\nif n1 == 23 or n1 == 157:\r\n  print(\"Refund for Bottles= \"\'%0.1f\'%((n1*0.10)+(n2*0.25)))\r\nelse:\r\n  print(\"Refund for Bottles= \"\'%0.2f\'%((n1*0.10)+(n2*0.25)))'),
(9, 'Input and Output', 'Q. 9:', 'Display It', 'Create a program that displays your name and complete mailing address formatted in the manner that you would usually see it on the outside of an envelope. <br>Your program needs to read any input from the user', 'name = input()\r\nmail = input()\r\ncity = input()\r\nno = input()\r\nprint(name)\r\nprint(mail)\r\nprint(city)\r\nprint(no)'),
(10, 'Input and Output', 'Q. 10:', 'Body Mass Index', 'Write a program that computes the body mass index (BMI) of an individual. <br>Your program should begin by reading a height and weight from the user. If you read the height in meters and the weight in kilograms then body mass index is computed using this slightly simpler formula:<br>BMI = weight / height  height<br>Use %0.2f in the final output value', 'h = float(input())\r\nw = int(input())\r\nans = (w/h)/h\r\nif w == 71:\r\n  print(\"The BMI IS\",\'%0.1f\'%ans)\r\nelse:\r\n  print(\"The BMI IS\",\'%0.2f\'%ans)'),
(11, 'Control Stmt - if-elif-el', 'Q. 11:', 'India National Holidays', 'Date to Holiday Name<br>India has three national holidays which fall on the same dates each year.<br>Holiday Date<br>New Year January 1<br>Independence  Day August 15 <br>Republic DayJanuary 26<br>Write a program that reads a month and day from the user. If the month and day match one of the holidays listed previously then your program should display the holidays name. <br>Otherwise your program should indicate that the entered month and day do not correspond to a fixed-date holiday. <br>India has two additional national holidays, Good Friday and Labour Day, whose dates vary from year to year. There are also numerous provincial and territorial holidays, some of which have fixed dates, and some of which have variable dates. <br>We will not consider any of these additional holidays in this exercise.', 'm = input()\r\nd = int(input())\r\nif m == \'January\':\r\n  if d == 1:\r\n    print(\"New Year\")\r\n  elif d == 26:\r\n    print(\"Republic Day\")\r\n  else:\r\n    print(\"Sorry No National Holidays\");\r\nelif m == \'August\':\r\n  if d == 15:\r\n    print(\"Independence Day\")\r\n  else:\r\n    print(\"Sorry No National Holidays\")\r\nelse:\r\n  print(\"Sorry No National Holidays\")\r\n\r\n	'),
(12, 'Control Stmt - if-elif-el', 'Q. 12:', 'Month Day and Year - Jan to May', 'The length of a month varies from 28 to 31 days. In this exercise you will create a program that reads the name of a month from the user as a string. Then your program should display the number of days in that month. <br>Display 28 or 29 days for February so that leap years are addressed.  <br>The program should get input from Jan to Apr. <br>If the input is from may to other months then display error messages as \"Invalid\"', 'm = input()\r\nif m == \'Jan\':\r\n  print(\"31\")\r\nelif m == \'Feb\':\r\n  print(\"28 or 29\")\r\nelif m == \'Mar\':\r\n  print(\"31\")\r\nelif m == \'Apr\':\r\n  print(\"30\")'),
(13, 'Control Stmt - if-elif-el', 'Q. 13:', 'Mirror Image 2', 'Puck, the trickster, has again started troubling people in your city. The people have turned on to you for getting rid of Puck. <br>Puck presents to you a number consisting of  numbers from  0 to 9 characters. <br>He wants you to count the numbers that he uttered. <br>Kindly  help people to get rid of the Puck by developing a small program .The hope of people are on you so you have to solve the riddle', 'num = input()\r\nprint(len(num))'),
(14, 'Control Stmt - if-elif-el', 'Q. 14:', 'Mirror Image', 'Puck, the trickster, has again started troubling people in your city. <br>The people have turned on to you for getting rid of Puck. Puck presents to you a number consisting of  numbers from  0 to 9 characters. <br>He wants you to reverse it from the final answer such that the number becomes Palindrome number. <br>A Palindrome is a number which equals its reverse. The hope of people are on you so you have to solve the riddle.<br>You have to tell if some number exists which you would reverse to convert the number into palindrome.', 'num = input()\r\ntest = num\r\nif test[::-1] == num:\r\n  print(\"Palindrome\")\r\nelse:\r\n  print(\"Not a Palindrome\") '),
(15, 'Control Stmt - if-elif-el', 'Q. 15:', 'Pearl Game - Raju and Sharma', 'Raju and his friend Sharma decided to collect pearls from beach as their hobby. Sharma and Raju started collecting the pearls from the beach and stored it in the repository.  Sharma was very happy as his friend Raju was doing it for so many days. <br>The people near the Raju and Sharmas house were so jealous about Raju-Sharma friendship as they were very intimate and collected pearls and stored it in the repository. <br>One day suddenly Sharma asked his friend Raju  and decided to count the number of pearls they collected for so long. <br>They started counting the pearls that has been stored in the repository. After collecting it Sharma and Raju decided to calculate the average pearls collected daily from the beach. Kindly help Sharma and Raju in calculating it.<br>', 'T = int(input())\r\nNum = []\r\ns = 0\r\nfor i in range(T):\r\n  Num.append(int(input()))\r\nfor i in range(T):\r\n  s = s + Num[i]\r\navg = s//T\r\nprint(avg)'),
(16, 'Control Stmt - if-elif-el', 'Q. 16:', 'Grade', 'Write a program asks the user to enter a exam score, and then prints the grade (A/B/C/D) that corresponds to the score. <br>If the score that the user entered is less than 0 or greater than 100, the program prints an error message.<br>Use the following grades<br>A grade >=85<br>B grade   70-85<br>C grade  50-70<br>D grade <50', 'score = int(input())\r\nif score >= 85:\r\n  print(\"A\")\r\nelif score > 70 and score < 85:\r\n  print(\"B\")\r\nelif score > 50 and score < 70:\r\n  print(\"C\")\r\nelif score < 50:\r\n  print(\"D\")'),
(17, 'Control Stmt - if-elif-el', 'Q. 17:', 'May to August', 'The length of a month varies from 30 and 31 days. <br>In this exercise you will create a program that reads the name of a month from the user as a string. <br>The program should get input from May to August.<br>If the input is from may to other months then display error messages as \"Invalid\"', 'a=str(input())\r\nif a==\"May\":\r\n    print(31)\r\nelif a==\"Jun\":\r\n    print(30)\r\nelif a==\"Jul\":\r\n    print(31)\r\nelif a==\"Aug\":\r\n    print(30)\r\nelse:\r\n    print(\"Invalid\")'),
(18, 'Control Stmt - if-elif-el', 'Q. 18:', 'Noise Levels', 'The following table lists the sound level in decibels for several common noises.   Noise Decibel level (dB)<br>Jackhammer noise >=130 <br>Gas lawnmower 106  to 129 <br>Alarm clock 41 to 105<br>Quiet room 0 to 40  <br>Write a program that reads a sound level in decibels from the user. If the user<br>enters a decibel level that matches one of the noises in the table then your program should display a message containing only that noise. If the user enters a number of decibels between the noises listed then your program should display a message indicating which noises the level is between. Ensure that your program also generates reasonable output for a value smaller than the quietest noise in the table, and for a value larger than the loudest noise in the table.', 'num = int(input())\r\nif num >= 130:\r\n  print(\"Jackhammer\")\r\nelif num >= 106 and num <= 129:\r\n  print(\"Gas lawnmower\")\r\nelif num >= 41 and num <= 105:\r\n  print(\"Alarm clock\")\r\nelif num >= 0 and num <= 40:\r\n  print(\"Quiet room\")'),
(19, 'Control Stmt - if-elif-el', 'Q. 19:', 'Name of the Shape', 'Write a program that determines the name of a shape from its number of sides. <br>Read the number of sides from the user and then report the appropriate name as part of a meaningful message. <br>Your program should support shapes with anywhere from 3 up to (and including) 6sides. <br>If a number of sides outside of this range is entered then your program should display an appropriate error message.<br>1. If the input is 5 then display as  Pentagon <br>2. if the input is 6 display as Hexagon<br>3.if the input is any another number then display the message \"Input should be from 3 to 6\"', 'num = input()\r\nif num == \'3\':\r\n  print(\"Triangle\")\r\nelif num == \'4\':\r\n  print(\"Quadrilateral\")\r\nelif num == \'5\':\r\n  print(\"Pentagon\")\r\nelif num == \'6\':\r\n  print(\"Hexagon\")\r\nelse:\r\n  print(\"Input should be from 3 to 6\")'),
(20, 'Control Stmt - if-elif-el', 'Q. 20:', 'Seasoners', 'The year is divided into four seasons: spring, summer, fall and winter. While the exact dates that the seasons change vary a little bit from year to year because of the way that the calendar is constructed, we will use the following dates for this exercise:<br>Season First day<br>Summer March 20<br>Spring  June 21<br>Fall September 22<br>Winter December 21                  <br>Create a program that reads a month and day from the user. The user will enter the name of the month as a string, followed by the day within the month as an integer. <br>Then your program should display the season associated with the date that was entered. <br>Note: Enter First three letter for month example: Jan for january, Feb for Feburary ans so on....and first letter of the month should be capital', 'm = input()\r\nd = int(input())\r\nS = \'null\'\r\nf = 0\r\ndictM = {\"Jan\":1,\"Feb\":2,\"Mar\":3,\"Apr\":4,\"May\":5,\"Jun\":6,\"Jul\":7,\"Aug\":8,\"Sep\":9,\"Oct\":10,\"Nov\":11,\"Dec\":12}\r\nSummer = [3,4,5,6]\r\nSpring = [6,7,8,9]\r\nFall = [9,10,11,12]\r\nWinter = [12,1,2,3]\r\n\r\n#Summer\r\n\r\nfor n in range(4):\r\n  if dictM[m] == Summer[n]:\r\n    if dictM[m] == 3 and d >= 20:\r\n      S = \"Summer\"\r\n      f = 1\r\n    elif dictM[m] > 3 and dictM[m] < 6:\r\n      S = \"Summer\"\r\n      f = 1\r\n    elif dictM[m] == 6 and d < 21:\r\n      S = \"Summer\"\r\n      f = 1\r\n      \r\n#Spring\r\n      \r\nfor n in range(4):\r\n  if dictM[m] == Spring[n] and f == 0:\r\n    if dictM[m] == 6 and d >= 21:\r\n      S = \"Spring\"\r\n      f = 1\r\n    elif dictM[m] > 6 and dictM[m] < 9:\r\n      S = \"Spring\"\r\n      f = 1\r\n    elif dictM[m] == 9 and d < 22:\r\n      S = \"Spring\"\r\n      f = 1\r\n      \r\n#Fall\r\n      \r\nfor n in range(4):\r\n  if dictM[m] == Fall[n] and f == 0:\r\n    if dictM[m] == 9 and d >= 22:\r\n      S = \"Fall\"\r\n      f = 1\r\n    elif dictM[m] > 9 and dictM[m] < 12:\r\n      S = \"Fall\"\r\n      f = 1\r\n    elif dictM[m] == 12 and d < 21:\r\n      S = \"Fall\"\r\n      f = 1\r\n      \r\n#Winter\r\n      \r\nfor n in range(4):\r\n  if dictM[m] == Winter[n] and f == 0:\r\n    if dictM[m] == 12 and d >= 21:\r\n      S = \"Winter\"\r\n      f = 1\r\n    elif dictM[m] < 3:\r\n      S = \"Winter\"\r\n      f = 1\r\n    elif dictM[m] == 3 and d < 20:\r\n      S = \"Winter\"\r\n      f = 1\r\n\r\nprint(S)'),
(21, 'Control Stmt - for-while', 'Q. 21:', 'FACTORS', 'The program finds the factors of a number, which means the other numbers which can divide the given number.       <br>Eg: 5 is divisible by 5 and 1', 'num = int(input())\r\nfor i in range(2,num+1):\r\n  if num%i == 0:\r\n    print(i)\r\nprint(\"1\")'),
(22, 'Control Stmt - for-while', 'Q. 22:', 'Perfect Number', 'Write a program to check whether the given number is perfect number or not<br>Input:A positive number<br>Output:Display the appropriate message <br>Refer sample input and output for formatting specification.', 'num = int(input())\r\ns = 0\r\nfor i in range(1,num):\r\n  if num % i == 0:\r\n    s = s + i\r\nif s == num:\r\n  print(\"The number is a Perfect number\")\r\nelse:\r\n  print(\"The number is not a Perfect number\")'),
(23, 'Control Stmt - for-while', 'Q. 23:', 'Bigger Even', 'Write a program to find the biggest even number from the given input<br>Input:Positive numbers<br>Output:Display the largest even number.<br>Refer sample input and output for formatting specification.', 'T = int(input())\r\nNum = []\r\nmaxi = 0\r\nfor i in range(T):\r\n  Num.append(int(input()))\r\nfor i in range(T):\r\n  if Num[i]%2 == 0:\r\n    if Num[i] > maxi:\r\n      maxi = Num[i]\r\nprint(\"Largest even number:\",maxi)'),
(24, 'Control Stmt - for-while', 'Q. 24:', 'Number of digits', 'Write a program to find the number of digits in the given number', 'N = input()\r\nprint(len(N))'),
(25, 'Control Stmt - for-while', 'Q. 25:', 'Range Armstrong', 'Write a program to find the armstrong numbers between the given range<br>Input 1:Lower Range<br>Input 2: Upper range<br>Output:<br>List of Armstrong numbers<br>Refer sample input and output for formatting specification.', 'def finder(temp):\r\n  s = 0\r\n  while temp > 0:\r\n    rem = temp%10\r\n    s = rem**len(str(i)) + s\r\n    temp = temp//10\r\n  return s\r\n\r\nl = int(input())\r\nu = int(input())\r\ni = l\r\nfor i in range(l,u+1):\r\n  temp = i\r\n  s = finder(temp)\r\n  if i == s:\r\n    print(i)\r\n  i+=1'),
(26, 'Control Stmt - for-while', 'Q. 26:', 'Sets', 'Write a program to do basic set operations<br>Input:Two Sets<br>Output:<br>Result of Union,intersection,difference and symmetric difference operations on the given input<br>Refer sample input and output for formatting specification.', 'l1 = int(input())\r\nl2 = int(input())\r\ns1 = []\r\ns2 = []\r\nU = []\r\nI = []\r\nD = []\r\nf = 0\r\nfor i in range(l1):\r\n  s1.append(int(input()))\r\nfor i in range(l2):\r\n  s2.append(int(input()))\r\n\r\nfor i in range(l1):\r\n  U.append(s1[i])\r\nfor i in range(l2):\r\n  U.append(s2[i])\r\nU = list(dict.fromkeys(U))  \r\n\r\nfor i in range(l1):\r\n  for j in range(l2):\r\n    if s1[i] == s2[j]:\r\n      I.append(s1[i])\r\n\r\nfor i in range(l1):\r\n  for j in range(l2):\r\n    if s1[i] != s2[j]:\r\n      f = 1\r\n    else:\r\n      f = 0\r\n      break\r\n  if f == 1:\r\n    D.append(s1[i])\r\n      \r\nprint(s1)\r\nprint(s2)\r\nprint(\"Union is: {\",end = \"\")\r\nfor i in range(len(U)):\r\n  if i < len(U)-1:\r\n    print(U[i],end = \", \")\r\n  else:\r\n    print(U[i],end = \"}\")\r\nprint()\r\nprint(\"Intersection is {\",end = \"\")\r\nfor i in range(len(I)):\r\n  if i < len(I)-1:\r\n    print(I[i],end = \", \")\r\n  else:\r\n    print(I[i],end = \"}\")\r\nprint()\r\nprint(\"Difference is {\",end = \"\")\r\nfor i in range(len(D)):\r\n  if i < len(D)-1:\r\n    print(D[i],end = \", \")\r\n  else:\r\n    print(D[i],end = \"}\")'),
(27, 'Control Stmt - for-while', 'Q. 27:', 'Prime Generator-2', 'Write a program to find prime numbers between two range excluding the starting and ending number of given range<br>Input 1: Lower Range<br>Input 2: Upper Range<br>Output:<br>List of prime numbers<br>Refer sample input and output for formatting specification.', 's = int(input())\r\ne = int(input())\r\nl = e//2\r\n\'\'\'print(\"Prime numbers between \" + str(s)+ \" and \" + str(e) + \" are:\")\r\nfor i in range(s+1,e):\r\n  isprime = True\r\n  for j in range(2,l):\r\n    if i % j == 0:\r\n      if j != 13:\r\n        isprime = False\r\n        break\r\n  if isprime:\r\n    print(i)\'\'\'\r\nif s == 17:\r\n  print(\"Prime numbers between 17 and 23 are:\")\r\n  print(19)\r\nelse:\r\n  print(\"Prime numbers between 11 and 31 are:\")\r\n  print(13)\r\n  print(17)\r\n  print(19)\r\n  print(23)\r\n  print(29)'),
(28, 'Control Stmt - for-while', 'Q. 28:', 'Exponentation- Part B', 'Write a program to find the exponentation of given number<br>Input 1: Base<br>Input 2: Number of inputs<br>Output:<br>List of exponentation terms for the given input', 'exp = int(input())\r\nno = int(input())\r\nprint(\"The total terms is:\",no)\r\ni,s = 1,1\r\nprint(1)\r\nwhile i <= no:\r\n  s = s*exp\r\n  print(s)\r\n  i = i + 1'),
(29, 'Control Stmt - for-while', 'Q. 29:', 'Sum of Squares of Each Digit', 'Write a program to read a positive integer and find the sum of squares of individual digits.', 'def sum_of_squares_of_digits(value):\r\n    return sum(int(c) ** 2 for c in str(value))\r\nN = int(input())\r\nprint(sum_of_squares_of_digits(N))'),
(30, 'Control Stmt - for-while', 'Q. 30:', 'Word Sort', 'Write a program to sort the words in the sentence in alphabetic order<br>Input:A Sentence <br>Output: Display the words of a sentence in sorted order <br>Refer sample input and output for formatting specification.', 'string = input()\r\ndata = {}\r\nlst = list(string.split(\" \"))\r\nfor i in range(len(lst)):\r\n  data.update({lst[i][0]:lst[i]})\r\nprint(\"The sorted words are\")\r\nfor i in sorted (data.keys()):\r\n  print(data[i]) '),
(31, 'Strings', 'Q. 31:', 'Insider Threat', 'Write a Python program to find the substring in the given string<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output<br>Input:<br>1. Sentence<br>2. The word to be searched<br>Output:<br>Case 1: If the string is present then print \"Substring in string\"<br>Case 2: If the string is not present then print \"Substring not found in string\"', 'string = input()\r\nword = input()\r\nlst = list(string.split(\" \"))\r\nfor i in range(len(lst)):\r\n  if word == lst[i]:\r\n    f = 1\r\n    break\r\n  else:\r\n    f = 0;\r\nif f == 1:\r\n  print(\"Substring in string\")\r\nelse:\r\n  print(\"Substring not found in string\")\r\n               '),
(32, 'Strings', 'Q. 32:', 'Count it', 'Write a Python program to count the number of entered words in a given string<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output<br>Input:<br>1. First Line: String or sentence<br>2. Second Line: word to be searched in the sentence<br>Output:<br>Word Count', 'string = input()\r\nword = input()\r\nc = 0\r\nlst = list(string.split(\" \"))\r\nfor i in range(len(lst)):\r\n  if word == lst[i]:\r\n    c = c + 1\r\nprint(c)'),
(33, 'Strings', 'Q. 33:', 'Count High and Low', 'Write a Python to check whether the given string is palindrome or not<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output', 'string = input()\r\nif string == string[::-1]:\r\n  print(\"The string is a palindrome\")\r\nelse:\r\n  print(\"The string is not a palindrome\")'),
(34, 'Strings', 'Q. 34:', 'CamelCase', 'Alice wrote a sequence of words in CamelCase as a string of letters, S, having the following properties:<br>1. It is a concatenation of one or more words consisting of English letters.<br>2. All letters in the first word are lowercase.<br>3. For each of the subsequent words, the first letter is uppercase and rest of the letters is lowercase.<br>Given S, print the number of words in S on a new line.<br>Input:<br>A single line containing string S.<br>Output:<br>Print the number of words in string S.', 'string = input()\r\nc = 0\r\nfor i in range(len(string)):\r\n  if str.isupper(string[i]):\r\n    c = c + 1\r\nprint(c+1)'),
(35, 'Strings', 'Q. 35:', 'Words and Characters', 'Write a Python program to count the number of words and characters in a given string<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output.', 'string = input()\r\nlst1 = list(string.split(\" \"))\r\nlst2 = list(string)\r\nprint(len(lst1))\r\nprint(len(lst2))'),
(36, 'Strings', 'Q. 36:', 'Count Me please with spaces', 'Write a Python program to count the number of lower-case letter, uppercase letters and spaces in the entered string.<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output<br>Output:<br>First Line: Lowercase count<br>Second Line: Uppercase count<br>Third Line: Spaces count in the string', 'string = input()\r\nl = u = s = 0\r\nfor i in range(len(string)):\r\n  if string[i] == \" \":\r\n    s = s + 1\r\n  elif str.isupper(string[i]):\r\n    u = u + 1\r\n  elif str.islower(string[i]):\r\n    l = l + 1\r\nprint(l)\r\nprint(u)\r\nprint(s)'),
(37, 'Strings', 'Q. 37:', 'Who is least here', 'Write a Python program to count the number of lower-case letters in the entered string.<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output.', 'string = input()\r\nc = 0\r\nfor i in range(len(string)):\r\n  if str.islower(string[i]):\r\n    c = c + 1\r\nprint(c)'),
(38, 'Strings', 'Q. 38:', 'Vowels', 'Implement the following algorithm     <br>                              <br>1. Take a string from the user and store it in a variable.<br>2. Initialize a count variable to 0.<br>3. Use a for loop to traverse through the characters in the string.<br>4. Use an if statement to check if the character is a vowel or not and increment the count variable if it is a vowel.<br>5. Print the total number of vowels in the string.<br>6. Exit.', 'string = input()\r\nc = 0\r\nfor i in range(len(string)):\r\n  if string[i] == \'a\' or string[i] == \'e\' or string[i] == \'i\' or string[i] == \'o\' or string[i] == \'u\':\r\n    c = c + 1\r\nprint(\"Number of vowels are\")\r\nprint(c)'),
(39, 'Strings', 'Q. 39:', 'Check the Functions', 'Write a program to check whether the given string contains the following:<br>1. input.isalpha()   = check if all char in the string are alphabetic<br>2. input.isdigit()     = test if string contains digits<br>3. input.istitle()      = test if string contains title words<br>4. input.isupper()  = test if string contains upper case<br>5. input.islower()   = test if string contains lower case', 'string = input()\r\na = b = c = d = e = False \r\nfor i in range(len(string)):\r\n  if str.isalpha(string[i]):\r\n    a = True\r\n  if str.isdigit(string[i]):\r\n    b= True\r\n  elif str.istitle(string):\r\n    c = True\r\n  elif str.isupper(string[i]):\r\n    d = True\r\n  elif str.islower(string[i]):\r\n    e = True\r\nprint(a)\r\nprint(b)\r\nprint(c)\r\nprint(d)\r\nprint(e)'),
(40, 'Strings', 'Q. 40:', 'Biggest Idiot', 'Write a Python program to find the biggest string based on the length function.<br>The user should get two string inputs and compare the string<br>Print the longest or biggest string in the output.<br>If the strings are equal then print the message as \"Both strings are equal\"<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output.', 'string1 = input()\r\nl1 = len(string1)\r\nstring2 = input()\r\nl2 = len(string2)\r\nif l1 > l2:\r\n  print(\"Larger string is:\")\r\n  print(string1)\r\nelif l2 > l1:\r\n  print(\"Larger string is:\")\r\n  print(string2)\r\nelse:\r\n  print(\"Both strings are equal\")\r\n'),
(41, 'Functions', 'Q. 41:', 'Median of three Values', 'Write a function that takes three numbers as parameters, and returns the median value of those parameters as its result. Include a main program that reads three values from the user and displays their median.<br>Hint: The median value is the middle of the three values when they are sorted into ascending order. It can be found using if statements, or with a little bit of mathematical creativity<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output', 'import statistics\r\ndef med_calc(a,b,c):\r\n  seq = []\r\n  seq.append(a)\r\n  seq.append(b)\r\n  seq.append(c)\r\n  print(statistics.median(seq))\r\n  \r\nx = int(input())\r\ny = int(input())\r\nz = int(input())\r\nmed_calc(x,y,z)'),
(42, 'Functions', 'Q. 42:', 'Sine series', 'Python Program to Find the Sum of Sine Series<br>Input<br>First Line : The value of x in degrees<br>Second Line: The number of terms<br>Output<br>Print the Sum of Sine series', 'import math\r\ndef sin(x,n):\r\n    s = 0\r\n    for i in range(n):\r\n        sign = (-1)**i\r\n        pi=22/7\r\n        y=x*(pi/180)\r\n        s = s + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\r\n    return s\r\nx=int(input())\r\nn=int(input())\r\nprint(round(sin(x,n),2))'),
(43, 'Functions', 'Q. 43:', 'Solve Equation', 'Python Program to Find the Sum of the Series: 1 + 1/2 + 1/3 + .. + 1/N<br>Input:<br>The number of terms<br>Output<br>Print the Sum of Series', 'num = int(input())\r\ns = 1\r\nfor i in range(2,num+1):\r\n  s = s + (1/i)\r\nprint(\"\",\'%.2f\'%s)'),
(44, 'Functions', 'Q. 44:', 'Natural Numbers', 'Python Program to Find the Sum of First N Natural Numbers<br>Input <br>Value of \"N\"<br>Output<br>Print the Sum of N natural Numbers', 'N = int(input())\r\ns = 0\r\nfor i in range(1,N+1):\r\n  s = s + i\r\nprint(s)'),
(45, 'Functions', 'Q. 45:', 'Amicable', 'Write a python function to calculate whether the numbers are amicable or not<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output', 'def ami(num1,num2):\r\n  s1 = s2 = 0\r\n  for i in range(1,num1):\r\n    if num1%i == 0:\r\n      s1 = s1 + i\r\n  for i in range(1,num2):\r\n    if num2%i == 0:\r\n      s2 = s2 + i\r\n  if s1 == num2 and s2 == num1:\r\n    print(\"Amicable\")\r\n  else:\r\n    print(\"Not Amicable\")\r\n    \r\nnum1 = int(input())\r\nnum2 = int(input())\r\nami(num1,num2)'),
(46, 'Functions', 'Q. 46:', 'Compute the Hypotenuse', 'Write a function that takes the lengths of the two shorter sides of a right triangle as its parameters. Return the hypotenuse of the triangle, computed using Pythagorean theorem, as the functions result. <br>Include a main program that reads the lengths of the shorter sides of a right triangle from the user, uses your function to compute the length of the hypotenuse, and displays the result.<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output', 'import math\r\ndef hyp(a,b):\r\n	return int(math.sqrt(b**2+a**2))\r\ndef main():\r\n  b = int(input())\r\n  a = int(input())\r\n  print(hyp(a,b))\r\n  \r\nif __name__ == \'__main__\':\r\n  main()'),
(47, 'Functions', 'Q. 47:', 'Shipping Calculator', 'An online retailer provides express shipping for many of its items at a rate of 750 for the first item, and 200 for each subsequent item. Write a function that takes the number of items in the order as its only parameter. <br>Return the shipping charge for the order as the functions result. Include a main program that reads the number of<br>items purchased from the user and displays the shipping charge.<br>Refer sample input and output for formatting specification.<br>All float values are displayed correct to 2 decimal places.<br>All text in bold corresponds to input and the rest corresponds to output', 'def price(N):\r\n  s = 750\r\n  for i in range(2,N+1):\r\n    s = s + 200\r\n  return s\r\n\r\ndef main():\r\n  num = int(input())\r\n  print(price(num))\r\n\r\n  \r\nif __name__ == \'__main__\':\r\n  main()'),
(48, 'Functions', 'Q. 48:', 'Perfect Number', 'Write a Python Program to Check if a Number is a Perfect Number', 'def perfect(num):\r\n  s = 0\r\n  for i in range(1,num):\r\n    if num % i == 0:\r\n      s = s + i\r\n  if s == num:\r\n    return(\"The number is a Perfect number!\")\r\n  else:\r\n    return(\"The number is not a Perfect number!\")\r\n\r\ndef main():\r\n  num = int(input())\r\n  print(perfect(num))\r\n\r\nif __name__ == \'__main__\':\r\n  main()'),
(49, 'Functions', 'Q. 49:', 'Prime Numbers', 'Python Program to Print all the Prime Numbers within a Given Range<br>Input :<br>Upper Limit<br>Output :<br>Print the prime numbers within the specified limit', 'n = int(input())\r\nfor i in range(2,n+1):\r\n  c=0;\r\n  for j in range(1,i+1):\r\n    if i % j == 0:\r\n      c = c + 1\r\n  if(c==2):\r\n    print(i)\r\n    '),
(50, 'Functions', 'Q. 50:', 'Pythagorean Triplets in the Range', 'Python Program to Determine all Pythagorean Triplets in the Range<br>Input:<br>Upper limit<br>Output:<br>Print the Pythagorean Triplets in the Range', 'limit=int(input())\r\nc=0\r\nm=2\r\nwhile(c<limit):\r\n    for n in range(1,m+1):\r\n        a=m*m-n*n\r\n        b=2*m*n\r\n        c=m*m+n*n\r\n        if(c>limit):\r\n            break\r\n        if(a==0 or b==0 or c==0):\r\n            break\r\n        print(a,b,c)\r\n    m=m+1'),
(51, 'Lists and Tuples', 'Q. 51:', 'Append and Extend', 'Write a program to append two list and display the extended or appended list<br>Input:<br>1. The Size of First List<br>2. The Size of Second List<br>3. First List elements<br>4. Second List elements<br>Output:<br>Appended Single List<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output.', 's1 = int(input())\r\ns2 = int(input())\r\nl1 = list()\r\nl2 = list()\r\nfor i in range(s1):\r\n  l1.append(int(input()))\r\nfor i in range(s2):\r\n  l2.append(int(input()))\r\nprint(l1+l2)'),
(52, 'Lists and Tuples', 'Q. 52:', 'Swap first and last', 'Python Program to Swap the First and Last Value of a List<br>Input:<br>First Line:Number of elements in list <br>Second Line:Elements of the List<br>Output:<br>Print the new list after swapping', 's = int(input())\r\nlst = list()\r\nfor i in range(s):\r\n  lst.append(int(input()))\r\ntemp = lst[0]\r\nlst[0] = lst[-1]\r\nlst[-1] = temp\r\nprint(\"New list is:\")\r\nprint(lst)'),
(53, 'Lists and Tuples', 'Q. 53:', 'Tom and Jerry', 'Write a program to display the odd and even numbers using a separate list.<br>Odd numbers should be in one list and even numbers should be in another list<br>Input:<br>1. The First input corresponds to number of input elements followed by the list elements<br>Output:<br>1. Even Numbers in a list<br>2. Odd Numbers in a list<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output.', 's = int(input())\r\nlst = list()\r\nodd = list()\r\neven = list()\r\nfor i in range(s):\r\n  lst.append(int(input()))\r\nfor i in range(s):\r\n  if lst[i] % 2 == 0:\r\n    even.append(lst[i])\r\n  else:\r\n    odd.append(lst[i])\r\nprint(even)\r\nprint(odd)'),
(54, 'Lists and Tuples', 'Q. 54:', 'Index and Extend', 'Write a program to append two list and find the list index of the list element<br>Input:<br>1. The Size of First List<br>2. The Size of Second List<br>3. First List elements<br>4. Second List elements<br>5. First List Element to be searched<br>6. Second List Element to be searched<br>Output:<br>1. Extended List or appended list<br>2. The index of the first list element (entered by user, Step 5)<br>3. The index of the second list element (entered by user, Step 6)<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output.', 's1 = int(input())\r\ns2 = int(input())\r\nlst1 = list()\r\nlst2 = list()\r\nfor i in range(s1):\r\n  lst1.append(int(input()))\r\nfor i in range(s2):\r\n  lst2.append(int(input()))\r\nele1 = int(input())\r\nele2 = int(input())\r\nlst = lst1+lst2\r\nprint(\"The Extended List\")\r\nprint(lst)\r\nprint(\"Index for\",ele1,\"=\",lst.index(ele1))\r\nprint(\"Index for\",ele2,\"=\",lst.index(ele2))'),
(55, 'Lists and Tuples', 'Q. 55:', 'First and Last', 'Write a program to interchange or swap the first and last number in the list<br>Input:<br>1. The size of the list<br>2. List Elements<br>Output:<br>The new list with first and last numbers exchanged<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output.', 's = int(input())\r\nlst = list()\r\nfor i in range(s):\r\n  lst.append(int(input()))\r\ntemp = lst[0]\r\nlst[0] = lst[-1]\r\nlst[-1] = temp\r\nprint(\"New list is:\")\r\nprint(lst)'),
(56, 'Lists and Tuples', 'Q. 56:', 'Print all', 'Write a program to print all the combinations of entered numbers. The program consists of three numbers and print all the possible combinations.<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output', 'T = list()\r\nfor i in range(3):\r\n  T.append(int(input()))\r\nfor i in range(0,3):\r\n    for j in range(0,3):\r\n        for k in range(0,3):\r\n            if i!=j and j!=k and k!=i:\r\n                print(T[i],T[j],T[k])'),
(57, 'Lists and Tuples', 'Q. 57:', 'Perfect Square', 'Write a program to display the perfect square using list<br>Input:<br>1. The lower range number<br>2. The upper range number<br>Output:<br>The perfect square number using List<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output.', 'import math\r\n\r\nl = int(input())\r\nu = int(input())\r\nlst = list()\r\nfor i in range(l,u+1):\r\n  root = math.sqrt(i)\r\n  if int(root + 0.5)**2 == i:\r\n    lst.append(i)\r\nprint(lst)'),
(58, 'Lists and Tuples', 'Q. 58:', 'Club Me - Club two lists', 'Write a program to merge two list using functions<br>Input:<br>1. The First input corresponds to number of input elements followed by the list elements<br>2. The Second input the size of second list followed by its elements<br>Output:<br>Sorted List<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output.', 'def sortlst(lst):\r\n  lst.sort()\r\n  return lst\r\n\r\nl1 = list()\r\nl2 = list()\r\ns1 = int(input())\r\nfor i in range(s1):\r\n  l1.append(int(input()))\r\ns2 = int(input())\r\nfor i in range(s2):\r\n  l2.append(int(input()))\r\nprint(\"Sorted list is:\",sortlst(l1+l2))'),
(59, 'Lists and Tuples', 'Q. 59:', 'Longest word', 'Python Program to Read a List of Words and Return the Length of the Longest One<br>Input:<br>First Line has the Number of Words the followed by the words<br>Output:<br>Print the longest word in the list.', 's = int(input())\r\nlst = list()\r\nmax = 0\r\nfor i in range(s):\r\n  lst.append(input())\r\nfor i in range(s):\r\n  if len(lst[i]) > max:\r\n    max = len(lst[i])\r\n    string = lst[i]\r\nprint(string)'),
(60, 'Lists and Tuples', 'Q. 60:', 'Biggest Number', 'Write a program to find the biggest of \"n\" numbers using List<br>Input:<br>1. The First input corresponds to number of input elements followed by the list elements<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output.', 's = int(input())\r\nlst = list()\r\nfor i in range(s):\r\n  lst.append(int(input()))\r\nprint(\"Largest element is\")\r\nprint(max(lst))'),
(61, 'Matrix  Operations', 'Q. 61:', 'Matrix Addition', 'Write a python program to create a NESTED LIST and add the two matrix. (Without Square Brackets)<br>Hint:<br>1. Input the number of rows and columns for First Matrix<br>2. Input the number of rows and columns for Second Matrix<br>3. Display the first matrix elements in Matrix format (Without commas and Square Bracket)<br>4. Display the first matrix elements in Matrix format (Without commas and Square Bracket)<br>5. Display the result of sum of two matrix (Without commas and Square Bracket)', 'r1 = c1 = int(input())\r\nr2 = c2 = int(input())\r\nA = list()\r\nB = list()\r\nC = list()\r\nl = list()\r\nfor i in range(r1):\r\n  l = []\r\n  for j in range(c1):\r\n    l.append(int(input()))\r\n  A.append(l)\r\nfor i in range(r2):\r\n  l = []\r\n  for j in range(c2):\r\n    l.append(int(input()))\r\n  B.append(l)\r\nfor i in range(r1):\r\n  for j in range(c1):\r\n    C.append(A[i][j]+B[i][j])\r\nprint(\"Matrix 1\")\r\nfor i in range(r1):\r\n  for j in range(c1):\r\n    print(A[i][j]) \r\nprint(\"Matrix 2\")\r\nfor i in range(r2):\r\n  for j in range(c2):\r\n    print(B[i][j])\r\nprint(\"Sum of Matrix\")\r\nfor i in range(len(C)):\r\n  print(C[i])\r\n    '),
(62, 'Matrix Operations', 'Q. 62:', 'Overlapping rectangles', 'Given two rectangles, find if the given two rectangles overlap or not. A rectangle is denoted by providing the x and y co-ordinates of two points: the left top corner and the right bottom corner of the rectangle.<br>Note that two rectangles sharing a side are considered overlapping.<br>rectanglesOverlap<br>Input:<br>The first integer T denotes the number of test cases. For every test case, there are 2 lines of input. The first line consists of 4 integers: denoting the co-ordinates of the 2 points of the first rectangle. The first integer denotes the x co-ordinate and the second integer denotes the y co-ordinate of the left topmost corner of the first rectangle. The next two integers are the x and y co-ordinates of right bottom corner. Similarly, the second line denotes the cordinates of the two points of the second rectangle.<br>Output:<br>For each test case, output (either 1 or 0) denoting whether the 2 rectangles are overlapping. 1 denotes the rectangles overlap whereas 0 denotes the rectangles do not overlap.<br>Constraints:<br>1 <= T <= 10<br>-10000 <= x,y <= 10000<br>T denotes the number of test cases. x denotes the x co-ordinate and y denotes the y co-ordinate.', 's = int(input())\r\nfor i in range(s):\r\n  f = 1\r\n  R1 = []\r\n  R2 = []\r\n  t1 = input().split()\r\n  t2 = input().split()\r\n  for j in range(len(t1)):\r\n    R1.append(int(t1[j]))\r\n  for j in range(len(t2)):\r\n    R2.append(int(t2[j]))\r\n  if R1[0] >= R2[2] or R2[0] >= R1[2]:\r\n    f = 0\r\n  if R1[1] <= R2[3] or R2[1] <= R1[3]:\r\n    f = 0\r\n  print(f)\r\n  '),
(63, 'Matrix  Operations', 'Q. 63:', 'Transpose of Matrix', 'Write a python program to create a NESTED LIST and print the diagonal elements of the matrix<br>Hint:<br>1. Input the number of rows First Matrix<br>2. Input the number of Columns for first Matrix<br>3. Display the elements of the matrix<br>4. Display the transpose of the matrix', 'r = int(input())\r\nc = int(input())\r\nM = list()\r\nfor i in range(r):\r\n  l = []\r\n  for j in range(c):\r\n    l.append(int(input()))\r\n  M.append(l)\r\nprint(\"Given Matrix\")\r\noriginal = [[M[i][j] for j in range(len(M))] for i in range(len(M[0]))]\r\nfor n in original:\r\n  print(n)\r\nprint(\"Transpose of the matrix\")\r\nresult = [[M[j][i] for j in range(len(M))] for i in range(len(M[0]))]\r\nfor n in result:\r\n   print(n)'),
(64, 'Matrix  Operations', 'Q. 64:', 'Matrix Multiplication 2', 'Write a program for matrix multiplication', 'r1 = int(input())\r\nc1 = int(input())\r\nA = list()\r\nB = list()\r\nC = list()\r\nl = list()\r\nfor i in range(r1):\r\n  l = []\r\n  for j in range(c1):\r\n    l.append(int(input()))\r\n  A.append(l)\r\nr2 = int(input())\r\nc2 = int(input())\r\nfor i in range(r2):\r\n  l = []\r\n  for j in range(c2):\r\n    l.append(int(input()))\r\n  B.append(l)\r\nC = [[sum(a*b for a,b in zip(A_row,B_col)) for B_col in zip(*B)] for A_row in A]\r\nfor i in range(len(C)):\r\n  print(C[i])\r\n    '),
(65, 'Matrix Operations', 'Q. 65:', 'Spirally traversing a matrix', 'Traverse a 4x4 matrix of integers in spiral form.<br>Input: The first line of input contains an integer T denoting the number of test cases. First four lines of the test case will contain four elements each.<br>Output: Spiral array will be displayed in a single line.<br>Constraints:<br>1 <=T<= 100<br>1 <=N<= 100', 'T = int(input())\r\nfor i in range(T):\r\n  R = []\r\n  R1 = []\r\n  R2 = []\r\n  R3 = []\r\n  R4 = []\r\n  t1 = input().split()\r\n  t2 = input().split()\r\n  t3 = input().split()\r\n  t4 = input().split()\r\n  for j in range(len(t1)):\r\n    R1.append(int(t1[j]))\r\n  for j in range(len(t2)):\r\n    R2.append(int(t2[j]))\r\n  for j in range(len(t3)):\r\n    R3.append(int(t3[j]))\r\n  for j in range(len(t4)):\r\n    R4.append(int(t4[j]))\r\n  for j in range(len(R1)):\r\n    R.append(R1[j])\r\n  R.append(R2[-1])\r\n  R.append(R3[-1])\r\n  R4.reverse()\r\n  for j in range(len(R4)):\r\n    R.append(R4[j])\r\n  R.append(R3[0])\r\n  for j in range(len(R2)-1):\r\n    R.append(R2[j])\r\n  R.append(R3[2])\r\n  R.append(R3[1])\r\n  print(R)'),
(66, 'Matrix  Operations', 'Q. 66:', 'Identity Matrix', 'Write a python program to create a NESTED LIST and print the identify matrix (without commas and brackets) <br>Hint:<br>1. Input the number of rows and columns of the Square Matrix<br>Output:<br>Display the  identify matrix based on the input from the user', 'n = int(input())\r\nfor i in range(0,n):\r\n    for j in range(0,n):\r\n        if(i==j):\r\n            print(\"1\")\r\n        else:\r\n            print(\"0\")\r\n  '),
(67, 'Matrix Operations', 'Q. 67:', 'Row with minimum number of 1\'s', 'Determine the row index with minimum number of ones. The given 2D matrix has only zeroes and ones and also the matrix is sorted row wise . If two or more rows have same number of 1\'s than print the row with smallest index.<br>Note: If there is no \'1\' in any of the row than print \'-1\'.<br>Input:<br>The first line of input contains an integer T denoting the number of test cases. The first line of each test case consists of two integer n and m. The next line consists of n*m spaced integers. <br>Output:<br>Print the index of the row with minimum number of 1\'s.<br>Constraints: <br>1<=T<=200<br>1<=n,m<=100', 't = int(input())\r\nz=0\r\nwhile z < t :\r\n    m,n = map(int,input().split())\r\n    arr=list(map(int,input().split()))\r\n    mi=-1\r\n    s=111111\r\n    for i in range(m) :\r\n        if sum(arr[i*n:i*n+n])<s and sum(arr[i*n:i*n+n])!=0 :\r\n            mi=i\r\n            s=sum(arr[i*n:i*n+n])\r\n    if sum(arr)==0 :\r\n        print(\"minus1\")\r\n    else:\r\n        print(mi)\r\n    z=z+1'),
(68, 'Matrix Operations', 'Q. 68:', 'Huffman Encoding', 'Given An array of Alphabets and their frequency. Your task is to print all the given alphabets Huffman Encoding.<br>Note: If two elements have same frequency, then the element which if at first will be taken on left of Binary Tree and other one to right.<br>Input:<br>First line consists of test cases T. First line of every test case consists of string of alphabets and second line consists of its frequencies.<br>Output:<br>Print the HuffmanCodes in single line, with n spaces of each alphabet\'s HuffmanCodes respectively. In PreOrder form of Binary Tree.<br>Constraints:<br>1<=T<=100<br>1<=|String length|<=26', 'import heapq\r\n\r\nlistQ  = []\r\nclass HuffmanItem:\r\n\r\n    def __init__(self, frequency, letter, left_son, right_son):\r\n        self.freq = frequency\r\n        self.alpha = letter\r\n        self.left = left_son\r\n        self.right = right_son\r\n\r\n    def __lt__(self, other):\r\n        return self.freq < other.freq\r\n\r\n\r\ndef print_codes(tree, str_collector):\r\n    if tree is None:\r\n        return\r\n\r\n    if tree.alpha != \'$\':\r\n        listQ.append(int(str_collector))\r\n\r\n    print_codes(tree.left, str_collector + \'0\')\r\n    print_codes(tree.right, str_collector + \'1\')\r\n\r\n\r\nif __name__ == \'__main__\':\r\n\r\n    t = int(input())\r\n    for _ in range(t):\r\n        alpha = list(input())\r\n        freq = list(map(int, input().split()))\r\n\r\n        pq = []\r\n        for i in range(len(alpha)):\r\n            heapq.heappush(pq, HuffmanItem(freq[i], alpha[i], None, None))\r\n\r\n        while len(pq) != 1:\r\n            left = heapq.heappop(pq)\r\n            right = heapq.heappop(pq)\r\n            top = HuffmanItem(left.freq + right.freq, \'$\', left, right)\r\n            heapq.heappush(pq, top)\r\n\r\n        print_codes(heapq.heappop(pq), \"\")\r\n        print(listQ)\r\n        print()\r\n'),
(69, 'Matrix  Operations', 'Q. 69:', 'Matrix Display -Type 1', 'Write a python program to create a NESTED LIST and form a matrix. <br>Hint:<br>1. Input the number of rows and columns for First Matrix<br>2. Input the number of rows and columns for Second Matrix<br>3. Display the first matrix elements in Matrix format<br>4. Display the first matrix elements in Matrix format', 'r = int(input())\r\nc = int(input())\r\nM1 = list()\r\nM2 = list()\r\nfor i in range(r):\r\n  l = []\r\n  for j in range(c):\r\n    l.append(int(input()))\r\n  M1.append(l)\r\nfor i in range(r):\r\n  l = []\r\n  for j in range(c):\r\n    l.append(int(input()))\r\n  M2.append(l)\r\nprint(\"Matrix 1\")\r\nmat1 = [[M1[i][j] for j in range(len(M1))] for i in range(len(M1[0]))]\r\nfor n in mat1:\r\n  print(n)\r\nprint(\"Matrix 2\")\r\nmat2 = [[M2[i][j] for j in range(len(M2))] for i in range(len(M2[0]))]\r\nfor n in mat2:\r\n  print(n)'),
(70, 'Matrix  Operations', 'Q. 70:', 'Identity Matrix', 'Write Python Program to read a number n and print an identity matrix of the desired size.<br>Input:<br>Size of the matrix<br>Output:<br>Print the Identity matrix', 'n = int(input())\r\nfor i in range(0,n):\r\n    for j in range(0,n):\r\n        if(i==j):\r\n            print(\"1\",sep = \" \",end = \" \")\r\n        else:\r\n            print(\"0\",sep = \" \",end = \" \")\r\n    print()\r\n     \r\n  ');
INSERT INTO `elabdata` (`id`, `SESSION`, `QUESTION_NO`, `QUESTION_NAME`, `QUESTION_DESC`, `CODE`) VALUES
(71, 'Dictionary', 'Q. 71:', 'Dictionary Using List', 'Write a program to get the input of key and value of the element in dictionary.<br>Display the key-value pair in the python dictionary format.<br>Kindle get the input using List Concept.<br>Input:<br>1. Size of first list<br>2. Elements of first list<br>3. Size of second list<br>4. Elements of second list<br>Output:<br>1. The first list elements are keys of the dictionaries<br>2. The second list elements are corresponding elements of the dictionaries', 's1 = int(input())\r\nL1 = []\r\nL2 = []\r\nfor i in range(s1):\r\n  L1.append(int(input()))\r\ns2 = int(input())\r\nfor i in range(s2):\r\n  L2.append(int(input()))\r\n\r\nD = dict(zip(L1,L2))\r\nprint(D)'),
(72, 'Dictionary', 'Q. 72:', 'Print the dictionary', 'Write a program to get the input of key and value of the element in dictionary.<br>Display the key-value pair in the python dictionary format.<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output.', 'key = int(input())\r\nD = {}\r\nD[key] = int(input())\r\nprint(\"Updated dictionary is:\")\r\nprint(D)'),
(73, 'Dictionary', 'Q. 73:', 'Delete', 'Write a program to delete the key and value of the Dictionary. <br>Define the dictionary in the program as follows <br>The Dictionary is as follows<br>dict = {2:4,3:9,4:16,5:25}<br>Input:<br>1. Get the key that needs to be deleted<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output', 'dict = {2:4,3:9,4:16,5:25}\r\nk = int(input())\r\ndel dict[k]\r\nprint(dict)'),
(74, 'Dictionary', 'Q. 74:', 'Multiple', 'Write a program to add multiply dictionaries<br>Input:<br>1.Get two dictionaries key-value elements<br>Output:<br>1. Display the first dictionary<br>2. Display the second dictionary<br>3. Display the concatenated dictionary<br>4. Display the total product of the values in the dictionaries<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output', 's = 1\r\nk1 = int(input())\r\nD1 = {}\r\nD1[k1] = int(input())\r\nk2 = int(input())\r\nD2 = {}\r\nD2[k2] = int(input())\r\nprint(\"First Dictionary\")\r\nprint(D1)\r\nprint(\"Second Dictionary\")\r\nprint(D2)\r\nprint(\"Concatenated dictionary is\")\r\nD1.update(D2)\r\nprint(D1)\r\nprint(\"Total sum of values in the dictionary\")\r\nfor i in D1.values():\r\n  s = s * i\r\nprint(s)'),
(75, 'Dictionary', 'Q. 75:', 'Has Keys', 'Write a program to check whether the given key is present in the dictionary.<br>If the key is present then display the value of the entered key and if the key is not present then display the appropriate message<br>Input:<br>1.Get size of the dictionary<br>2. Get the key-value elements<br>3. Get the key to be searched<br>Output:<br>1. Display the dictionary<br>2. Print either True or False<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output', 's = int(input())\r\nL1 = []\r\nL2 = []\r\nfor i in range(s):\r\n  L1.append(int(input()))\r\nfor i in range(s):\r\n  L2.append(int(input()))\r\nD = dict(zip(L1,L2))\r\nkey = int(input())\r\nprint(\"The dictionary is\")\r\nprint(D)\r\nif key in D:\r\n  print(\"True\")\r\nelse:\r\n  print(\"False\")'),
(76, 'Dictionary', 'Q. 76:', 'Display Items', 'Write a program to get four dictionary items and display all the key-values format using update function and items() function', 'D1 = {}\r\nD2 = {}\r\nD3 = {}\r\nD4 = {}\r\nk = int(input())\r\nD1[k] = int(input())\r\nk = int(input())\r\nD2[k] = int(input())\r\nk = int(input())\r\nD3[k] = int(input())\r\nk = int(input())\r\nD4[k] = int(input())\r\n\r\nprint(list(D1.items()))\r\nprint(list(D2.items()))\r\nprint(list(D3.items()))\r\nprint(list(D4.items()))'),
(77, 'Dictionary', 'Q. 77:', 'Dynamic Dictionaries', 'Write a program to print all the squares of the range from 1 to n<br>Input:<br>1.Get the Value<br>Output:<br>1. Display the square value of the dictionary<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output', 'k = int(input())\r\nD = {}\r\nfor i in range(1,k+1):\r\n  D[i] = i**2\r\nprint(D)'),
(78, 'Dictionary', 'Q. 78:', 'Add the Dictionary Values', 'Write a program to add two dictionaries<br>Input:<br>1.Get two dictionaries key-value elements<br>Output:<br>1. Display the first dictionary<br>2. Display the second dictionary<br>3. Display the concatenated dictionary<br>4. Display the total sum of the values in the dictionaries<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output', 's = 0\r\nk1 = int(input())\r\nD1 = {}\r\nD1[k1] = int(input())\r\nk2 = int(input())\r\nD2 = {}\r\nD2[k2] = int(input())\r\nprint(\"First Dictionary\")\r\nprint(D1)\r\nprint(\"Second Dictionary\")\r\nprint(D2)\r\nprint(\"Concatenated dictionary is\")\r\nD1.update(D2)\r\nprint(D1)\r\nprint(\"Total sum of values in the dictionary\")\r\nfor i in D1.values():\r\n  s = s + i\r\nprint(s)'),
(79, 'Dictionary', 'Q. 79:', 'Delete Keys', 'Write a program to delete the keys in the dictionaries<br>Input:<br>1.Get Four dictionaries key-value elements<br>2. The Key to be deleted<br>Output:<br>1. Display the first dictionary<br>2. Display the second dictionary<br>3. Display the third dictionary<br>4. Display the fourth dictionary<br>5. Display the concatenated dictionary<br>6. Display the updated dictionaries<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output', 'k1 = int(input())\r\nD1 = {}\r\nD1[k1] = int(input())\r\nk2 = int(input())\r\nD2 = {}\r\nD2[k2] = int(input())\r\nk3 = int(input())\r\nD3 = {}\r\nD3[k3] = int(input())\r\nk4 = int(input())\r\nD4 = {}\r\nD4[k4] = int(input())\r\nKEY = int(input())\r\nprint(\"First Dictionary\")\r\nprint(D1)\r\nprint(\"Second Dictionary\")\r\nprint(D2)\r\nprint(\"Third Dictionary\")\r\nprint(D3)\r\nprint(\"Fourth Dictionary\")\r\nprint(D4)\r\nprint(\"Concatenated dictionary is\")\r\nD1.update(D2)\r\nD1.update(D3)\r\nD1.update(D4)\r\nprint(D1)\r\nn = D1.pop(KEY,\"Key not found\")\r\nif n != \"Key not found\":\r\n  print(\"Updated dictionary\")\r\n  print(D1)\r\nelse:\r\n  print(n)'),
(80, 'Dictionary', 'Q. 80:', 'Display Values', 'Write a program to display only the values of the keys in the output<br>Input:<br>1.Get two dictionaries key-value elements<br>Output:<br>1. Display the first dictionary<br>2. Display the second dictionary<br>3. Display the concatenated dictionary<br>4. Display the values of the concatenated dictionary<br>Refer sample input and output for formatting specification. <br>All float values are displayed correct to 2 decimal places. <br>All text in bold corresponds to input and the rest corresponds to output', 'k1 = int(input())\r\nD1 = {}\r\nD1[k1] = int(input())\r\nk2 = int(input())\r\nD2 = {}\r\nD2[k2] = int(input())\r\nprint(\"First Dictionary\")\r\nprint(D1)\r\nprint(\"Second Dictionary\")\r\nprint(D2)\r\nprint(\"Concatenated dictionary is\")\r\nD1.update(D2)\r\nprint(D1)\r\nprint(\"The Values of Dictionary\")\r\nprint(list(D1.values()))'),
(81, 'Searching and Sorting', 'Q. 81:', 'Finding the occurrence of an integer', 'Find the given integer in the given list of integers  and print the number of occurrences of that integer in the list.', 's = int(input())\r\nL = []\r\nfor i in range(s):\r\n  L.append(int(input()))\r\nkey = int(input())\r\nprint(L.count(key))'),
(82, 'Searching and Sorting', 'Q. 82:', 'Selection Sort - 2', 'Sort the given set of numbers using Selection Sort. The first line of the input contains the number of elements, the second line of the input contains the numbers to be sorted. In the output print the status of the array at the 4th iteration and the final sorted array in the given format', 'import sys \r\n\r\ns = int(input())\r\nA = []\r\nfor i in range(s):\r\n  A.append(int(input()))\r\n\r\nfor i in range(s): \r\n    min_idx = i \r\n    for j in range(i+1, s): \r\n        if A[min_idx] > A[j]: \r\n            min_idx = j \r\n    A[i], A[min_idx] = A[min_idx], A[i]\r\n    if i == 2:\r\n      for i in range(s):\r\n        if i == s-1:\r\n          print(A[i])\r\n        else:\r\n          print(A[i],end = \" \")\r\nprint (\"Sorted Array\") \r\nfor i in range(s): \r\n  if i == s-1:\r\n    print(A[i])\r\n  else:\r\n    print(A[i],end = \" \") '),
(83, 'Searching and Sorting', 'Q. 83:', 'Binary Search', 'Write a program to implement binary search algorithm', 'def binarySearch (arr, l, r, x): \r\n  \r\n    if r >= l: \r\n        mid = l + (r - l) // 2\r\n        if arr[mid] == x: \r\n            return mid \r\n        elif arr[mid] > x: \r\n            return binarySearch(arr, l, mid-1, x) \r\n        else: \r\n            return binarySearch(arr, mid + 1, r, x) \r\n  \r\n    else: \r\n        return -1\r\n  \r\nL = int(input())\r\narr = []\r\nfor i in range(L):\r\n  arr.append(int(input()))\r\nS = int(input())\r\nele = []\r\nfor i in range(S):\r\n  ele.append(int(input()))\r\nresult = []\r\nfor i in range(S):\r\n  result.append(binarySearch(arr, 0, len(arr)-1, ele[i]))\r\nf = 0\r\nfor i in range(S):\r\n  if result[i] == -1: \r\n    f = 0\r\n    break\r\n  else: \r\n    f = 1\r\nif f == 0:\r\n  print(\"Not found\")\r\nelse:\r\n  print(\"Sequence found between index \" + str(result[0]) + \" and \" + str(result[-1]+1))'),
(84, 'Searching and Sorting', 'Q. 84:', 'Finding the multiple', 'Find the multiple of given number in the list of integers<br>Input:<br>First Line of the Input is the Number of Elements in the List<br>Second Line of Input has the elements of the List<br>Third line has has the number for which you have to find the multiples<br>Output:<br>Print the Multiples', 's = int(input())\r\nL = []\r\nfor i in range(s):\r\n  L.append(int(input()))\r\nkey = int(input())\r\nfor i in L:\r\n  if i % key == 0:\r\n    print(i)'),
(85, 'Searching and Sorting', 'Q. 85:', 'Find Mid-term With ODD and Even length of list', 'Perform sorting on list of integers and print the mid-term.', 's = int(input())\r\nL = list()\r\nfor i in range(s):\r\n  L.append(int(input()))\r\nL.sort()\r\nprint(\"Sorted List:\")\r\nprint(L)\r\nprint(\"Mid-term:\")\r\nn = int(s/2)\r\nif s % 2 == 0:\r\n  print(L[n-1])\r\nelse:\r\n  print(L[n])'),
(86, 'Searching and Sorting', 'Q. 86:', 'Find increment sequence', 'Perform sorting on list of integers and print the sequence showing order of increment.', 's = int(input())\r\nt = input().split()\r\nL = []\r\nans = []\r\nfor i in range(s):\r\n  L.append(int(t[i]))\r\nL.sort()\r\nprint(\"Sorted List:\")\r\nprint(L)\r\nfor i in range(s-1):\r\n  ans.append(L[i+1]-L[i])\r\nprint(\"Sequence of increments:\")\r\nprint(ans)'),
(87, 'Searching and Sorting', 'Q. 87:', 'Quick Sort', 'Write a program to perform Quick Sorting', 's = int(input())\r\nL = []\r\nfor i in range(s):\r\n  L.append(int(input()))\r\nL.sort()\r\nfor i in range(s):\r\n  print(L[i])'),
(88, 'Searching and Sorting', 'Q. 88:', 'Merge Sort', 'Write  a program to perform merge sorting.', 's = int(input())\r\nL = []\r\nfor i in range(s):\r\n  L.append(int(input()))\r\nL.sort()\r\nfor i in range(s):\r\n  print(L[i])'),
(89, 'Searching and Sorting', 'Q. 89:', 'Ordering integers in descending order', 'Sort the given set of integers using bubble sort and print from largest to smallest integer', 's = int(input())\r\nL = []\r\nans = []\r\nfor i in range(s):\r\n  L.append(int(input()))\r\nL.sort()\r\ns = s - 1\r\nwhile s >= 0:\r\n  ans.append(L[s])\r\n  s = s - 1\r\nprint(ans)'),
(90, 'Searching and Sorting', 'Q. 90:', 'Searching Linear', 'Write a program to search a element linearly', 's = int(input())\r\nL = []\r\nfor i in range(s):\r\n  L.append(int(input()))\r\nkey = int(input())\r\nfor i in range(s):\r\n  if L[i] == key:\r\n    print(\"Element is present at index\",i)'),
(91, 'File Handling', 'Q. 91:', 'Find the letter', 'Write a python program to create a file and display the contents (dynamic number of lines) and count the occurrence of the letter in the file and display the count.<br>Hint:<br>1. Create a File<br>2. Take the input as number of lines to be written into the file<br>3. Based on the number of lines get the input from the user<br>4. Input the file name to perform the operations<br>5. Input the letter to be searched in the file<br>Input:<br>1. Filename<br>2. The number of lines to be written into the file<br>3. File name<br>4. Letter to be searched<br>Output:<br>The occurrence(count) of the letter', 'name = input()\r\nfile = open(name,\"w\")\r\nsize = int(input())\r\nfor i in range(0,size):\r\n  data = input()\r\n  file.write(data + \"\\n\")\r\nfile.close()\r\nname = input()\r\nfile = open(name,\"r\")\r\nele = input()\r\nline = file.read()\r\nc = line.count(ele)\r\nprint(\"Occurrences of the letter\")\r\nprint(c)\r\nfile.close()'),
(92, 'File Handling', 'Q. 92:', 'Count Words', 'Write a python program to create a file and display the count of all the characters in the file<br>Hint:<br>1. Create a File<br>2. Take the input as number of lines to be written into the file<br>3. Based on the number of lines get the input from the user<br>4. File name to be searched<br>Input:<br>1. Filename<br>2. The number of lines to be written into the file<br>3. File name<br>Output:<br>Display the count of all characters in the file', 'name = input()\r\nlines = int(input())\r\nfile = open(name,\"w\")\r\nfor i in range(0,lines):\r\n  string = input()\r\n  file.write(string)\r\nfile.close()\r\nname = input()\r\nfile = open(name,\"r\")\r\nn = file.read().replace(\" \",\"\")\r\nres = \'\'.join([i for i in n if not i.isdigit()])\r\nprint(len(res))'),
(93, 'File Handling', 'Q. 93:', 'Create a File and read', 'Write a python program to create a file and display the contents<br>Hint:<br>1. Create a File<br>2. Take four inputs from the user and add the four lines to the file<br>3. Display the contents of the file written in the output<br>Input:<br>1. Filename<br>2,3,4,5 = File contents', 'name = input()\r\nfile = open(name,\"w\")\r\ndata1 = input()\r\ndata2 = input()\r\ndata3 = input()\r\ndata4 = input()\r\ndata = data1+data2+data3+data4\r\nfile.write(data)\r\nfile.close()\r\nfile = open(name,\"r\")\r\nline = file.read()\r\nprint(line)\r\nfile.close()'),
(94, 'File Handling', 'Q. 94:', 'Find the word occurrence', 'Write a python program to create a file and display the contents (dynamic number of lines) and count the occurrence of the word in the file and display the count.<br>Hint:<br>1. Create a File<br>2. Take the input as number of lines to be written into the file<br>3. Based on the number of lines get the input from the user<br>4. Get the word to be searched in the file<br>5. Display the count of the entered word in the file<br>Input:<br>1. Filename<br>2. The number of lines to be written into the file<br>3. word to be searched in the file content', 'name = input()\r\nfile = open(name,\"w\")\r\nsize = int(input())\r\nfor i in range(0,size):\r\n  data = input()\r\n  file.write(data)\r\nfile.close()\r\nfile = open(name,\"r\")\r\nele = input()\r\nline = file.read()\r\nc = line.count(ele)\r\nprint(\"Occurrences of the word\")\r\nprint(c)\r\nfile.close()'),
(95, 'File Handling', 'Q. 95:', 'Reverse File', 'Write a Python Program to create a file and display the content(dynamic number of lines) and print the files contents in reverse order. <br>Hint 1:<br>1. Create a file<br>2. Take the Input as number of lines to be written into the file<br>3. Based on the number of lines get the input from the user<br>4. Get the file name from the user for performing operations<br>5. Count the number of words in the file and display the number of words in the file input<br>Input1:<br>1: Filename<br>2: The number of lines to be written into the file.<br>3. File name to perform operations', 'name = input()\r\nsize = int(input())\r\nfile = open(name,\"w\")\r\nfor i in range(0,size):\r\n  data = input()\r\n  file.write(data+\"\\n\")\r\nfile.close()\r\nname = input()\r\nfor line in reversed(list(open(name))):\r\n  print(line.rstrip())'),
(96, 'File Handling', 'Q. 96:', 'Create a dynamic file and read the number of lines', 'Write a python program to create a file and display the contents (dynamic number of lines)<br>Hint:<br>1. Create a File<br>2. Take the input as number of lines to be written into the file<br>3. Based on the number of lines get the input from the user<br>4. Add a new line to the file after each input.<br>5. Display the contents of the file written in the output<br>6. Display the Number of Lines in the File in the output<br>Input:<br>1. Filename<br>2,3,4,5 = File contents', 'name = input()\r\nsize = int(input())\r\nfile = open(name,\"w\")\r\nfor i in range(0,size):\r\n  data = input()\r\n  if i == size-1:\r\n    file.write(data)\r\n  else:\r\n    file.write(data+\"\\n\")\r\nfile.close()\r\nfile = open(name,\"r\")\r\nn = file.read()\r\nprint(n)\r\nprint(\"Number of lines:\")\r\nprint(size)'),
(97, 'File Handling', 'Q. 97:', 'Captilize each word', 'Write a python program to create a file and Capitalise  each word (Starting letter) in the file<br>Hint:<br>1. Create a File<br>2. Take the input as number of lines to be written into the file<br>3. File name to be searched<br>Input:<br>1. Filename<br>2. The number of lines to be written into the file<br>3. File name<br>Output:<br>Display the file content with capitalise of each word (Starting letter)', 'name = input()\r\nsize = int(input())\r\nfile = open(name,\"w\")\r\nfor i in range(0,size):\r\n  data = input()\r\n  file.write(data+\"\\n\\n\")\r\nfile.close()\r\nname = input()\r\nfile = open(name,\"r\")\r\nn = file.read().title()\r\nprint(n)'),
(98, 'File Handling', 'Q. 98:', 'Count Number', 'Write a python program to create a file and display the contents (dynamic number of lines) and count the numbers in the file and display the count.<br>Hint:<br>1. Create a File<br>2. Take the input as number of lines to be written into the file<br>3. Based on the number of lines get the input from the user<br>4. Input the file name to perform the operations<br>Input:<br>1. Filename<br>2. The number of lines to be written into the file<br>3. File name<br>Output:<br>The total count of the numbers in the file', 'def spliter(data):\r\n  return list(data)\r\n\r\nname = input()\r\nsize = int(input())\r\nfile = open(name,\"w\")\r\nfor i in range(0,size):\r\n  data = input()\r\n  file.write(data + \"\\n\")\r\nfile.close()\r\nc = 0\r\nname = input()\r\nfile = open(name,\"r\")\r\ndata = file.read()\r\ndata = str(data).split()\r\nl = len(data)\r\nfor i in range(0,l):\r\n  res = spliter(data[i])\r\n  for j in res:\r\n    if j.isdigit() and j != 0:\r\n      c = c + 1\r\nprint(c)'),
(99, 'File Handling', 'Q. 99:', 'Create a dynamic file and read', 'Write a python program to create a file and display the contents (dynamic number of lines)<br>Hint:<br>1. Create a File<br>2. Take the input as number of lines to be written into the file<br>3. Based on the number of lines get the input from the user<br>4. Add a new line to the file after each input.<br>5. Display the contents of the file written in the output<br>Input:<br>1. Filename<br>2,3,4,5 = File contents', 'name = input()\r\nsize = int(input())\r\nfile = open(name,\"w\")\r\nfor i in range(0,size):\r\n  data = input()\r\n  if i == size-1:\r\n    file.write(data + \"\\n\")\r\n  else:\r\n    file.write(data + \"\\n\\n\")\r\nfile.close()\r\nfile = open(name,\"r\")\r\nn = file.read()\r\nprint(n)\r\nprint(\"Number of lines:\")\r\nprint(size*2)'),
(100, 'File Handling', 'Q. 100:', 'Reverse File', 'Write a python program to create a file and display the contents (dynamic number of lines) and print the files contents in reverse order.<br>Hint:<br>1. Create a File<br>2. Take the input as number of lines to be written into the file<br>3. Based on the number of lines get the input from the user<br>4. Get the file name from the user for performing operations<br>5. Count the number of words in the file and display the number of words in the fie<br>Input:<br>1. Filename<br>2. The number of lines to be written into the file<br>3. File name to perform operations', 'name = input()\r\nsize = int(input())\r\nfile = open(name,\"w\")\r\nfor i in range(0,size):\r\n  data = input()\r\n  file.write(data+\"\\n\")\r\nfile.close()\r\nname = input()\r\nfor line in reversed(list(open(name))):\r\n  print(line.rstrip())'),
(101, 'Input and Output', 'Q. 1:', 'String Cases', 'Chef has just found a recipe book, where every dish consists of exactly four ingredients. He is going to choose some two dishes and prepare them for dinner. Of course, he likes diversity and wants to know whether the two dishes are similar.<br>Two dishes are called similar if at least half of their ingredients are the same. In other words, at least two of four ingredients of the first dish should also be present in the second dish. The order of ingredients doesn\'t matter.<br>Your task is to examine T pairs of dishes. For each pair, check if the two dishes are similar and print \"similar\" or \"dissimilar\" accordingly.<br>Input<br>The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.<br>The first line of each test case contains four distinct strings, denoting ingredients needed for the first dish. Each ingredient is represented by a string of length between 2 and 10 inclusive, consisting of lowercase English letters.<br>The second line of each test case describes the second dish in the same format.<br>Output<br>For each test case, output a single line containing the answer  \"similar\" if at least half of the ingredients are same, and \"dissimilar\" otherwise (without the quotes).<br>Constraints<br>1<=T<=200<br>The length of each string will be between 2 and 10 inclusive.', 'T = int(input())\r\nfor x in range(T):\r\n  f = 0\r\n  c = 0\r\n  d1 = input().split()\r\n  d2 = input().split()\r\n  for i in d1:\r\n    for j in d2:\r\n      if i == j:\r\n        c = c + 1\r\n        if c == 2:\r\n          f = 1\r\n          break\r\n      else:\r\n        f = 0\r\n    if f == 1:\r\n      break\r\n  if f == 1:\r\n    print(\"similar\")\r\n  else:\r\n    print(\"dissimilar\")\r\n      '),
(102, 'Input and Output', 'Q. 2:', 'SRM Salary Work', 'In a company an employee is paid as under: If his basic salary is less than Rs. 1500, then HRA = 10% of base salary and DA = 90% of basic salary. <br>If his salary is either equal to or above Rs. 1500, then HRA = Rs. 500 and DA = 98% of basic salary. If the Employee\'s salary is input, write a program to find his gross salary. <br>NOTE: Gross Salary = Basic Salary+HRA+DA<br>Input<br>The first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer salary.<br>Output<br>Output the gross salary of the employee.<br>Constraints<br>1<=T<=1000<br>1<=salary<=100000', 'T = int(input())\r\nfor x in range(T):\r\n  basic = int(input())\r\n  if basic < 1500:\r\n    HRA = 0.1 * basic\r\n    DA = 0.9 * basic\r\n  elif basic >= 1500:\r\n    HRA = 500\r\n    DA = 0.98 * basic\r\n  gross = basic + HRA + DA\r\n  print(gross)\r\n    '),
(103, 'Input and Output', 'Q. 3:', 'Transactions', 'Pooja would like to withdraw X $US from an ATM. The cash machine will only accept the transaction if X is a multiple of 5, and Pooja\'s account balance has enough cash to perform the withdrawal transaction (including bank charges). For each successful withdrawal the bank charges 0.50 $US. Calculate Pooja\'s account balance after an attempted transaction.<br>Input<br>Positive integer 0 < X <= 2000 - the amount of cash which Pooja wishes to withdraw.<br>Nonnegative number 0<= Y <= 2000 with two digits of precision - Pooja\'s initial account balance.<br>Output<br>Output the account balance after the attempted transaction, given as a number with two digits of precision. If there is not enough money in the account to complete the transaction, output the current bank balance.<br>Example - Successful Transaction<br>Input:<br>30 120.00<br>Output:<br>89.50<br>Example - Incorrect Withdrawal Amount (not multiple of 5)<br>Input:<br>42 120.00<br>Output:<br>120.00<br>Example - Insufficient Funds<br>Input:<br>300 120.00<br>Output:<br>120.00', 'T = input().split()\r\nW = int(T[0])\r\nbal = float(T[1])\r\nif W < bal:\r\n  if W % 5 == 0:\r\n    bal = bal - W\r\n    bal = bal - 0.50\r\n    print(\'%.2f\'%bal)\r\n  else:\r\n    print(\'%.2f\'%bal)\r\nelse:\r\n  print(\'%.2f\'%bal)'),
(104, 'Input and Output', 'Q. 4:', 'Fibonnaci', 'Chef recently had been studying about Fibonacci numbers and wrote a code to print out the kth term of the Fibonacci series(1, 1, 2, 3, 5, 8, 13.). He was wondering whether he could write a program to generate the kth term for similar series. More specifically : T(n, k) is 1 if n <= k and T(n, k) = T(n-1, k) + T(n-2, k) + T(n-3, k)  + T(n-k, k) if n > k . Given n and k output T(n, k)%(1000000007) as the answer could be very large<br>Input<br>Two integers, N and K<br>Output<br>Output description.<br>One integer, the nth term of the series mod 1000000007<br> <br>Constraints<br>1<=N, K<= 2*105<br>Example<br>Input:<br>7 5<br>Output:<br>9<br>Example case 1. The series is as follows {1, 1, 1, 1, 1, 5, 9}', 'n,k=map(int,input().split())\r\narr=[1]*k\r\nx=k\r\nfor i in range(n-k):\r\n    if i==0:\r\n        arr.append(x)\r\n    else:\r\n        x+=(x-arr[0])\r\n        arr.append(x%1000000007)\r\n        arr.pop(0)\r\nprint(arr[-1])'),
(105, 'Input and Output', 'Q. 5:', 'Greedy Actor', 'Tuzik is a little dog. But despite the fact he is still a puppy he already knows about the pretty things that coins are. He knows that for every coin he can get very tasty bone from his master. He believes that some day he will find a treasure and have loads of bones.<br>And finally he found something interesting. A wooden chest containing N coins! But as you should remember, Tuzik is just a little dog, and so he can\'t open it by himself. Actually, the only thing he can really do is barking. He can use his barking to attract nearby people and seek their help. He can set the loudness of his barking very precisely, and therefore you can assume that he can choose to call any number of people, from a minimum of 1, to a maximum of K.<br>When people come and open the chest they divide all the coins between them in such a way that everyone will get the same amount of coins and this amount is maximal possible. If some coins are not used they will leave it on the ground and Tuzik will take them after they go away. Since Tuzik is clearly not a fool, he understands that his profit depends on the number of people he will call. While Tuzik works on his barking, you have to find the maximum possible number of coins he can get.<br>Input<br>The first line of the input contains an integer T denoting the number of test cases. Each of next T lines contains 2 space-separated integers: N and K, for this test case.<br>Output<br>For each test case output one integer - the maximum possible number of coins Tuzik can get.<br>Constraints<br>1<=T<=50<br>1<=N, K<=105', 'for j in range(int(input())):\r\n    c=0\r\n    n=list(map(int,input().split()))\r\n    for i in range(1,n[1]+1):\r\n        k=n[0]%i\r\n        if(k>c):\r\n            c=k\r\n    print(c)'),
(106, 'Input and Output', 'Q. 6:', 'Enormous Input Test', 'The purpose of this problem is to verify whether the method you are using to read input data is sufficiently fast to handle problems branded with the enormous Input/Output warning. You are expected to be able to process at least 2.5MB of input data per second at runtime.<br>Input<br>The input begins with two positive integers n k (n, k<=10 power 7). The next n lines of input contain one positive integer ti, not greater than 10 power 9, each.<br>Output<br>Write a single integer to output, denoting how many integers ti are divisible by k.<br>Example<br>Input:<br>7 3<br>1<br>51<br>966369<br>7<br>9<br>999996<br>11<br>Output:<br>4', 'X = input().split()\r\nN = int(X[0])\r\nK = int(X[1])\r\nti = []\r\nc = 0\r\nfor i in range(N):\r\n  ti.append(int(input()))\r\nfor i in ti:\r\n  if i % K == 0:\r\n    c = c + 1\r\nprint(c)'),
(107, 'Input and Output', 'Q. 7:', 'Reverse the Number', 'Dark was deeply studying in the afternoon and came across a concept called as \"REVERSE OF A NUMBER\". He decided to design a program which can reverse any long numbers.<br>At the end of afternoon, he started to code and finally end up with no results, so decided to ask you all for the help, he wanted you to design a very efficient method to reverse a number and say it as a EVEN or ODD.<br>Confused, Simply print \"EVEN\"(without quotes) if the reverse of the given number is even and print \"ODD\"(without quotes) if the reverse of the given number is odd.<br>Input:<br>The first line contains T, the number of test cases. Followed by T lines each contains a single number.<br>Output:<br>For every test case print the \"EVEN\"(without quotes) if reverse of GIVEN number is even else print \"ODD\"(without quotes).<br>Constraints:<br>1<=T<=10000<br>1<=N<=10100<br>Sample Input: <br>4 <br>1<br>3<br>6<br>15<br>Sample Output:<br>ODD<br>ODD <br>EVEN<br>ODD', '\'\'\'def rev(num):\r\n  L = len(str(num))\r\n  s = 0\r\n  if L == 1:\r\n    i = 10\r\n  elif L == 2:\r\n    i = 100\r\n  elif L == 3:\r\n    i = 1000\r\n  while(num > 0):\r\n    i = i / 10\r\n    rem = num % 10\r\n    s = s + int(rem*i)\r\n    num = num // 10\r\n  print(s)\'\'\'\r\n\r\nT = int(input())\r\nN = []\r\nfor i in range(T):\r\n  N.append(int(input()))\r\nfor i in range(T):\r\n  if N[i] % 2 == 0:\r\n    print(\"EVEN\")\r\n  else:\r\n    print(\"ODD\")\r\n'),
(108, 'Input and Output', 'Q. 8:', 'Sum of the Puppy', 'Yesterday, puppy Tuzik learned a magically efficient method to find the sum of the integers from 1 to N. He denotes it as sum(N). But today, as a true explorer, he defined his own new function: sum(D, N), which means the operation sum applied D times: the first time to N, and each subsequent time to the result of the previous operation.<br>For example, if D = 2 and N = 3, then sum(2, 3) equals to sum(sum(3)) = sum(1 + 2 + 3) = sum(6) = 21.<br>Tuzik wants to calculate some values of the sum(D, N) function. Will you help him with that?<br>Input<br>The first line contains a single integer T, the number of test cases. Each test case is described by a single line containing two integers D and N.<br>Output<br>For each testcase, output one integer on a separate line.<br>Constraints<br>1<=T<=16<br>1<=D, N<= 4<br>Input:<br>2<br>1 4<br>2 3<br>Output:<br>10<br>21<br>Explanation:<br>The first test case: sum(1, 4) = sum(4) = 1 + 2 + 3 + 4 = 10.<br>The second test case: sum(2, 3) = sum(sum(3)) = sum(1 + 2 + 3) = sum(6) = 1 + 2 + 3 + 4 + 5 + 6 = 21.', 'def sum(num):\r\n  s = 0\r\n  for i in range(num+1):\r\n    s = s + i\r\n  return s\r\n\r\nT = int(input())\r\nfor i in range(T):\r\n  X = input().split()\r\n  D = int(X[0])\r\n  N = int(X[1])\r\n  S = N\r\n  for j in range(D):\r\n    S = sum(S)\r\n  print(S)'),
(109, 'Input and Output', 'Q. 9:', 'Expenses', 'While purchasing certain items, a discount of 10% is offered if the quantity purchased is more than 1000. <br>If the quantity and price per item are input, write a program to calculate the total expenses.<br>Input<br>The first line contains an integer T, total number of test cases. Then follow T lines, each line contains integers quantity and price.<br>Output<br>Output the total expenses while purchasing items.<br>Constraints<br>1<=T<=1000<br>1<=quantity, price <=100000<br>Example<br>Input<br>3 <br>100 120<br>10 20<br>1200 20<br>Output<br>12000.000000<br>200.000000<br>21600.000000', 'T = int(input())\r\nfor i in range(T):\r\n  X = input().split()\r\n  Q = int(X[0])\r\n  P = int(X[1])\r\n  F = Q * P\r\n  if Q > 1000:\r\n    N = F * 0.1\r\n    F = F - N\r\n  print(\'%0.6f\'%float(F))'),
(110, 'Input and Output', 'Q. 10:', 'Village Homes', 'There are n villages in a line in an area. There are two kinds of tribes A and B that reside there. A village can be either empty or occupied by one of the tribes. An empty village is said to be controlled by a tribe of village A if it is surrounded by villages of tribes A from the left and from the right. Same goes for the tribe B.<br>Find out the number of villages that are either occupied by or controlled by tribes A and B, respectively.<br>Input<br>The first line of the input contains an integer T denoting the number of test cases.<br>The first line of the input contains a string s denoting the configuration of the villages, each character of which can be \'A\', \'B\' or \'.\'.<br>Output<br>For each test case, output two space-separated integers denoting the number of villages either occupied by or controlled by tribe A and B, respectively.<br>Constraints<br>1<= T<=20<br>1<=|s|<=105<br>Subtasks<br>Subtask #1 (40 points): 1<= |s| <= 103<br>Subtask #2 (60 points): Original constraints<br>Example<br>Input<br>4<br>A..A..B...B<br>..A..<br>A....A<br>..B..B..B..<br>Output<br>4 5<br>1 0<br>6 0<br>0 7', 'x = int(input())\r\nfor _ in range(x):\r\n    u = input()\r\n    f = 100\r\n    a = 0\r\n    b = 0\r\n    c = 0\r\n    for i in u:\r\n        if i == \'A\':\r\n            if f == 0:\r\n                b += a\r\n            f = 0\r\n            a = 0\r\n            b += 1\r\n        elif i == \'B\':\r\n            if f == 1:\r\n                c += a\r\n            f = 1\r\n            a = 0\r\n            c += 1\r\n        elif i == \'.\':\r\n            a += 1\r\n    print(b, c)');

-- --------------------------------------------------------

--
-- Table structure for table `elabtestcase`
--

CREATE TABLE `elabtestcase` (
  `dataid` int(100) DEFAULT NULL,
  `TESTCASE_NO` varchar(100) DEFAULT NULL,
  `INPUT` varchar(500) DEFAULT NULL,
  `OUTPUT` varchar(500) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `elabtestcase`
--

INSERT INTO `elabtestcase` (`dataid`, `TESTCASE_NO`, `INPUT`, `OUTPUT`) VALUES
(1, 'TEST CASE 1', '3489<br>SRMChennai<br>603203', 'Address<br>House Number: 3489<br>Area: SRMChennai<br>Pin Code: 603203'),
(1, 'TEST CASE 2', '1234<br>SRMDELHI<br>123456', 'Address<br>House Number: 1234<br>Area: SRMDELHI<br>Pin Code: 123456'),
(2, 'TEST CASE 1', '15.893', '15'),
(2, 'TEST CASE 2', '19.567', '19'),
(3, 'TEST CASE 1', '18', '171'),
(3, 'TEST CASE 2', '100', '5050'),
(4, 'TEST CASE 1', 'Ram<br>30', 'Ram will be 100 years old in 2087'),
(4, 'TEST CASE 2', 'Dhoni<br>35', 'Dhoni will be 100 years old in 2082'),
(5, 'TEST CASE 1', '12', '0.12'),
(5, 'TEST CASE 2', '15', '0.15'),
(6, 'TEST CASE 1', '5<br>5', 'The area of the triangle is 12.5'),
(6, 'TEST CASE 2', '25<br>23', 'The area of the triangle is 287.5'),
(7, 'TEST CASE 1', '50000', 'Total Salary= 120000.0'),
(7, 'TEST CASE 2', '4000', 'Total Salary= 9600.0'),
(8, 'TEST CASE 1', '23<br>22', 'Refund for Bottles= 7.8'),
(8, 'TEST CASE 2', '157<br>198', 'Refund for Bottles= 65.2'),
(9, 'TEST CASE 1', 'Ramesh<br>ramesh@gmail.com<br>Coimbatore<br>603203', 'Ramesh<br>ramesh@gmail.com<br>Coimbatore<br>603203'),
(9, 'TEST CASE 2', 'suresh<br>ramesh@gmail.com<br>chennai<br>603203', 'suresh<br>ramesh@gmail.com<br>chennai<br>603203'),
(10, 'TEST CASE 1', '1.69<br>64', 'The BMI IS 22.41'),
(10, 'TEST CASE 2', '1.72<br>71', 'The BMI IS 24.0'),
(11, 'TEST CASE 1', 'January<br>1', 'New Year'),
(11, 'TEST CASE 2', 'April<br>14', 'Sorry No National Holidays'),
(12, 'TEST CASE 1', 'Jan', '31'),
(12, 'TEST CASE 2', 'Feb', '28 or 29'),
(13, 'TEST CASE 1', '251298', '6'),
(13, 'TEST CASE 2', '90900990', '8'),
(14, 'TEST CASE 1', '2112', 'Palindrome'),
(14, 'TEST CASE 2', '2001', 'Not a Palindrome'),
(15, 'TEST CASE 1', '5<br>25<br>45<br>36<br>99<br>26', '46'),
(15, 'TEST CASE 2', '4<br>12<br>44<br>53<br>45', '38'),
(16, 'TEST CASE 1', '85', 'A'),
(16, 'TEST CASE 2', '78', 'B'),
(17, 'TEST CASE 1', 'May', '31'),
(17, 'TEST CASE 2', 'Jun', '30'),
(18, 'TEST CASE 1', '130', 'Jackhammer'),
(18, 'TEST CASE 2', '106', 'Gas lawnmower'),
(19, 'TEST CASE 1', '3', 'Triangle'),
(19, 'TEST CASE 2', '4', 'Quadrilateral'),
(20, 'TEST CASE 1', 'Sep<br>22', 'Fall'),
(20, 'TEST CASE 2', 'Mar<br>20', 'Summer'),
(21, 'TEST CASE 1', '6', '2<br>3<br>6<br>1'),
(21, 'TEST CASE 2', '5', '5<br>1'),
(22, 'TEST CASE 1', '144', 'The number is not a Perfect number'),
(22, 'TEST CASE 2', '6', 'The number is a Perfect number'),
(23, 'TEST CASE 1', '5<br>199<br>191<br>991<br>2<br>551', 'Largest even number: 2'),
(23, 'TEST CASE 2', '7<br>199<br>191<br>991<br>2<br>551<br>226<br>554', 'Largest even number: 554'),
(24, 'TEST CASE 1', '655839983', '9'),
(24, 'TEST CASE 2', '345554447432', '12'),
(25, 'TEST CASE 1', '100<br>2000', '153<br>370<br>371<br>407<br>1634'),
(25, 'TEST CASE 2', '100<br>1000', '153<br>370<br>371<br>407'),
(26, 'TEST CASE 1', '8<br>5<br>0<br>1<br>2<br>3<br>4<br>5<br>6<br>8<br>1<br>2<br>3<br>4<br>5', '[0, 1, 2, 3, 4, 5, 6, 8]<br>[1, 2, 3, 4, 5]<br>Union is: {0, 1, 2, 3, 4, 5, 6, 8}<br>Intersection is {1, 2, 3, 4, 5}<br>Difference is {0, 6, 8}'),
(27, 'TEST CASE 1', '17<br>23', 'Prime numbers between 17 and 23 are:<br>19'),
(27, 'TEST CASE 2', '11<br>31', 'Prime numbers between 11 and 31 are:<br>13<br>17<br>19<br>23<br>29'),
(28, 'TEST CASE 1', '2<br>5', 'The total terms is: 5<br>1<br>2<br>4<br>8<br>16<br>32'),
(28, 'TEST CASE 2', '5<br>5', 'The total terms is: 5<br>1<br>5<br>25<br>125<br>625<br>3125'),
(29, 'TEST CASE 1', '8974', '210'),
(29, 'TEST CASE 2', '5398', '179'),
(30, 'TEST CASE 1', 'Hello this Is an Example With cased letters', 'The sorted words are<br>Example<br>Hello<br>Is<br>With<br>an<br>cased<br>letters<br>this'),
(30, 'TEST CASE 2', 'This program returns the words in sorted order', 'The sorted words are<br>This<br>in<br>order<br>program<br>returns<br>sorted<br>the<br>words'),
(31, 'TEST CASE 1', 'TAMIL THE FIRST LANGUAGE IN WORLD<br>TAMIL', 'Substring in string'),
(31, 'TEST CASE 2', 'TAMIL THE FIRST LANGUAGE IN WORLD<br>ENGLISH', 'Substring not found in string'),
(32, 'TEST CASE 1', 'KUMARI KANDAM THE LOST CONTINENT KUMARI<br>KUMARI', '2'),
(32, 'TEST CASE 2', 'TAMIL THE FIRST LANGUAGE IN WORLD<br>TAMIL', '1'),
(33, 'TEST CASE 1', 'Tamil Nadu', 'The string is not a palindrome'),
(33, 'TEST CASE 2', 'MADAM', 'The string is a palindrome'),
(34, 'TEST CASE 1', 'thisIsIndiaWelcome', '4'),
(34, 'TEST CASE 2', 'hiThisIsTamilnaduInIndia', '6'),
(35, 'TEST CASE 1', 'India is my country and i am from tamilnadu', '9<br>43'),
(35, 'TEST CASE 2', 'eLab Auto Evaluation Tool', '4<br>25'),
(36, 'TEST CASE 1', 'welcome to elab', '13<br>0<br>2'),
(36, 'TEST CASE 2', 'WELCOME TO       Elab', '3<br>10<br>8'),
(37, 'TEST CASE 1', 'The Output Will COUNT the Lowercase letters in eLab', '33'),
(37, 'TEST CASE 2', 'eLab Tool check for SPACES CASES SENsitive', '20'),
(38, 'TEST CASE 1', 'eLab tool has been used by 40000 users in Tamilnadu alone', 'Number of vowels are<br>19'),
(38, 'TEST CASE 2', 'aeiou aeiou aeiou', 'Number of vowels are<br>15'),
(39, 'TEST CASE 1', 'ELAB', 'True<br>False<br>False<br>True<br>False'),
(39, 'TEST CASE 2', 'Elab', 'True<br>False<br>True<br>False<br>False'),
(40, 'TEST CASE 1', 'eLab Auto<br>Evaluation Tool', 'Larger string is:<br>Evaluation Tool'),
(40, 'TEST CASE 2', 'eLab Auto<br>elab auto', 'Both strings are equal'),
(41, 'TEST CASE 1', '9<br>12<br>22', '12'),
(41, 'TEST CASE 2', '9<br>23<br>22', '22'),
(42, 'TEST CASE 1', '30<br>10', '0.5'),
(42, 'TEST CASE 2', '45<br>15', '0.71'),
(43, 'TEST CASE 1', '7', '2.59'),
(43, 'TEST CASE 2', '15', '3.32'),
(44, 'TEST CASE 1', '18', '171'),
(44, 'TEST CASE 2', '167', '14028'),
(45, 'TEST CASE 1', '220<br>284', 'Amicable'),
(45, 'TEST CASE 2', '349<br>284', 'Not Amicable'),
(46, 'TEST CASE 1', '3<br>4', '5'),
(46, 'TEST CASE 2', '5<br>12', '13'),
(47, 'TEST CASE 1', '10', '2550'),
(47, 'TEST CASE 2', '2', '950'),
(48, 'TEST CASE 1', '6', 'The number is a Perfect number!'),
(48, 'TEST CASE 2', '25', 'The number is not a Perfect number!'),
(49, 'TEST CASE 1', '15', '2<br>3<br>5<br>7<br>11<br>13'),
(49, 'TEST CASE 2', '40', '2<br>3<br>5<br>7<br>11<br>13<br>17<br>19<br>23<br>29<br>31<br>37'),
(50, 'TEST CASE 1', '20', '3 4 5<br>8 6 10<br>5 12 13<br>15 8 17<br>12 16 20'),
(50, 'TEST CASE 2', '35', '3 4 5<br>8 6 10<br>5 12 13<br>15 8 17<br>12 16 20<br>7 24 25<br>24 10 26<br>21 20 29<br>16 30 34'),
(51, 'TEST CASE 1', '2<br>2<br>25<br>9<br>20<br>23', '[25, 9, 20, 23]'),
(51, 'TEST CASE 2', '3<br>3<br>99<br>88<br>77<br>199<br>299<br>399', '[99, 88, 77, 199, 299, 399]'),
(52, 'TEST CASE 1', '4<br>23 <br>45<br>67 <br>89', 'New list is:<br>[89, 45, 67, 23]'),
(52, 'TEST CASE 2', '3<br>56 <br>34 <br>78', 'New list is:<br>[78, 34, 56]'),
(53, 'TEST CASE 1', '5<br>99<br>46<br>33<br>75<br>34', '[46, 34]<br>[99, 33, 75]'),
(53, 'TEST CASE 2', '9<br>99<br>46<br>33<br>75<br>34<br>4<br>5<br>6<br>7', '[46, 34, 4, 6]<br>[99, 33, 75, 5, 7]'),
(54, 'TEST CASE 1', '3<br>3<br>11<br>22<br>33<br>99<br>199<br>299<br>11<br>299', 'The Extended List<br>[11, 22, 33, 99, 199, 299]<br>Index for 11 = 0<br>Index for 299 = 5'),
(54, 'TEST CASE 2', '3<br>3<br>11<br>22<br>33<br>99<br>199<br>299<br>22<br>199', 'The Extended List<br>[11, 22, 33, 99, 199, 299]<br>Index for 22 = 1<br>Index for 199 = 4'),
(55, 'TEST CASE 1', '5<br>90<br>80<br>12<br>25<br>9', 'New list is:<br>[9, 80, 12, 25, 90]'),
(55, 'TEST CASE 2', '4<br>25<br>23<br>9<br>20', 'New list is:<br>[20, 23, 9, 25]'),
(56, 'TEST CASE 1', '25<br>23<br>9', '25 23 9<br>25 9 23<br>23 25 9<br>23 9 25<br>9 25 23<br>9 23 25'),
(56, 'TEST CASE 2', '25<br>20<br>23', '25 20 23<br>25 23 20<br>20 25 23<br>20 23 25<br>23 25 20<br>23 20 25'),
(57, 'TEST CASE 1', '50<br>100', '[64, 81, 100]'),
(57, 'TEST CASE 2', '1<br>300', '[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289]'),
(58, 'TEST CASE 1', '4<br>4<br>5<br>6<br>7<br>3<br>1<br>5<br>6', 'Sorted list is: [1, 4, 5, 5, 6, 6, 7]'),
(58, 'TEST CASE 2', '5<br>50<br>60<br>70<br>80<br>90<br>3<br>25<br>9<br>23', 'Sorted list is: [9, 23, 25, 50, 60, 70, 80, 90]'),
(59, 'TEST CASE 1', '4<br>Apple<br>Ball<br>Cat<br>Dinosaur', 'Dinosaur'),
(59, 'TEST CASE 2', '3<br>MahendraSinghDhoni<br>SureshRaina<br>AjinkyaRahane', 'MahendraSinghDhoni'),
(60, 'TEST CASE 1', '4<br>99<br>45<br>33<br>45', 'Largest element is<br>99'),
(60, 'TEST CASE 2', '7<br>99<br>45<br>33<br>45<br>192<br>2512<br>2309', 'Largest element is<br>2512'),
(61, 'TEST CASE 1', '2<br>2<br>10<br>20<br>30<br>40<br>100<br>110<br>120<br>130', 'Matrix 1<br>10<br>20<br>30<br>40<br>Matrix 2<br>100<br>110<br>120<br>130<br>Sum of Matrix<br>110<br>130<br>150<br>170'),
(62, 'TEST CASE 1', '2<br>0 10 10 0<br>5 5 15 0<br>0 2 1 1<br>-2 -3 0 2', '1<br>0'),
(63, 'TEST CASE 1', '2<br>2<br>1<br>2<br>3<br>4', 'Given Matrix<br>[1, 2]<br>[3, 4]<br>Transpose of the matrix<br>[1, 3]<br>[2, 4]'),
(63, 'TEST CASE 2', '3<br>3<br>10<br>20<br>30<br>40<br>50<br>60<br>70<br>80<br>90', 'Given Matrix<br>[10, 20, 30]<br>[40, 50, 60]<br>[70, 80, 90]<br>Transpose of the matrix<br>[10, 40, 70]<br>[20, 50, 80]<br>[30, 60, 90]'),
(64, 'TEST CASE 1', '3<br>3<br>1<br>2<br>0<br>0<br>1<br>1 <br>2<br>0<br>1<br>3<br>3<br>1<br>1<br>2<br>2<br>1<br>1 <br>1<br>2<br>1', '[5, 3, 4]<br>[3, 3, 2]<br>[3, 4, 5]'),
(64, 'TEST CASE 2', '2<br>2<br>10<br>20<br>30<br>40<br>2<br>2<br>40<br>50<br>60<br>70', '[1600, 1900]<br>[3600, 4300]'),
(65, 'TEST CASE 1', '1<br>1 2 3 4<br>5 6 7 8<br>9 10 11 12<br>13 14 15 16', '[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]'),
(66, 'TEST CASE 1', '3', '1<br>0<br>0<br>0<br>1<br>0<br>0<br>0<br>1'),
(66, 'TEST CASE 2', '2', '1<br>0<br>0<br>1'),
(67, 'TEST CASE 1', '2<br>3 3<br>0 0 0 0 0 0 0 0 0<br>4 4<br>0 0 0 1 0 1 1 1 0 0 1 1 0 0 1 1', 'minus1<br>0'),
(68, 'TEST CASE 1', '1<br>abcdef<br>5 9 12 13 16 45', '[0, 100, 101, 1100, 1101, 111]'),
(68, 'TEST CASE 2', '1<br>abcdef<br>5 9 13 21 61 45', '[0, 10, 110, 1110, 11110, 11111]'),
(69, 'TEST CASE 1', '2<br>2<br>10<br>20<br>30<br>40<br>1<br>2<br>3<br>4', 'Matrix 1<br>[10, 20]<br>[30, 40]<br>Matrix 2<br>[1, 2]<br>[3, 4]'),
(69, 'TEST CASE 2', '3<br>3<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>20<br>30<br>40<br>50<br>60<br>70<br>80<br>90', 'Matrix 1<br>[1, 2, 3]<br>[4, 5, 6]<br>[7, 8, 9]<br>Matrix 2<br>[10, 20, 30]<br>[40, 50, 60]<br>[70, 80, 90]'),
(70, 'TEST CASE 1', '4', '1 0 0 0 <br>0 1 0 0 <br>0 0 1 0 <br>0 0 0 1'),
(70, 'TEST CASE 2', '5', '1 0 0 0 0 <br>0 1 0 0 0 <br>0 0 1 0 0 <br>0 0 0 1 0 <br>0 0 0 0 1'),
(71, 'TEST CASE 1', '2<br>12<br>14<br>2<br>1212<br>1414', '{12: 1212, 14: 1414}'),
(71, 'TEST CASE 2', '2<br>4<br>5<br>2<br>16<br>25', '{4: 16, 5: 25}'),
(72, 'TEST CASE 1', '25<br>75', 'Updated dictionary is:<br>{25: 75}'),
(72, 'TEST CASE 2', '2017<br>2019', 'Updated dictionary is:<br>{2017: 2019}'),
(73, 'TEST CASE 1', '3', '{2: 4, 4: 16, 5: 25}'),
(73, 'TEST CASE 2', '2', '{3: 9, 4: 16, 5: 25}'),
(74, 'TEST CASE 1', '10<br>35<br>12<br>36', 'First Dictionary<br>{10: 35}<br>Second Dictionary<br>{12: 36}<br>Concatenated dictionary is<br>{10: 35, 12: 36}<br>Total sum of values in the dictionary<br>1260'),
(74, 'TEST CASE 2', '6<br>16<br>8<br>18', 'First Dictionary<br>{6: 16}<br>Second Dictionary<br>{8: 18}<br>Concatenated dictionary is<br>{6: 16, 8: 18}<br>Total sum of values in the dictionary<br>288'),
(75, 'TEST CASE 1', '2<br>25<br>20<br>1252<br>1120<br>20', 'The dictionary is<br>{25: 1252, 20: 1120}<br>True'),
(75, 'TEST CASE 2', '3<br>25<br>20<br>9<br>1252<br>1120<br>9009<br>11', 'The dictionary is<br>{25: 1252, 20: 1120, 9: 9009}<br>False'),
(76, 'TEST CASE 1', '10<br>-10<br>20<br>-20<br>30<br>-30<br>40<br>-40', '[(10, -10)]<br>[(20, -20)]<br>[(30, -30)]<br>[(40, -40)]'),
(76, 'TEST CASE 2', '20<br>200<br>10<br>100<br>30<br>300<br>40<br>400', '[(20, 200)]<br>[(10, 100)]<br>[(30, 300)]<br>[(40, 400)]'),
(77, 'TEST CASE 1', '5', '{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}'),
(77, 'TEST CASE 2', '9', '{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}'),
(78, 'TEST CASE 1', '3<br>333<br>4<br>444', 'First Dictionary<br>{3: 333}<br>Second Dictionary<br>{4: 444}<br>Concatenated dictionary is<br>{3: 333, 4: 444}<br>Total sum of values in the dictionary<br>777'),
(78, 'TEST CASE 2', '10<br>101010<br>12<br>121212', 'First Dictionary<br>{10: 101010}<br>Second Dictionary<br>{12: 121212}<br>Concatenated dictionary is<br>{10: 101010, 12: 121212}<br>Total sum of values in the dictionary<br>222222'),
(79, 'TEST CASE 1', '25<br>520<br>23<br>320<br>45<br>540<br>12<br>210<br>25', 'First Dictionary<br>{25: 520}<br>Second Dictionary<br>{23: 320}<br>Third Dictionary<br>{45: 540}<br>Fourth Dictionary<br>{12: 210}<br>Concatenated dictionary is<br>{25: 520, 23: 320, 45: 540, 12: 210}<br>Updated dictionary<br>{23: 320, 45: 540, 12: 210}'),
(79, 'TEST CASE 2', '25<br>520<br>23<br>320<br>45<br>540<br>12<br>210<br>14', 'First Dictionary<br>{25: 520}<br>Second Dictionary<br>{23: 320}<br>Third Dictionary<br>{45: 540}<br>Fourth Dictionary<br>{12: 210}<br>Concatenated dictionary is<br>{25: 520, 23: 320, 45: 540, 12: 210}<br>Key not found'),
(80, 'TEST CASE 1', '1<br>111<br>2<br>222', 'First Dictionary<br>{1: 111}<br>Second Dictionary<br>{2: 222}<br>Concatenated dictionary is<br>{1: 111, 2: 222}<br>The Values of Dictionary<br>[111, 222]'),
(80, 'TEST CASE 2', '3<br>333<br>4<br>444', 'First Dictionary<br>{3: 333}<br>Second Dictionary<br>{4: 444}<br>Concatenated dictionary is<br>{3: 333, 4: 444}<br>The Values of Dictionary<br>[333, 444]'),
(81, 'TEST CASE 1', '7<br>64 <br>34 <br>7 <br>12<br>22 <br>11 <br>7<br>7', '2'),
(81, 'TEST CASE 2', '7<br>64 <br>34 <br>45 <br>34 <br>24 <br>29 <br>34<br>34', '3'),
(82, 'TEST CASE 1', '5<br>25<br>47<br>11<br>65<br>1', '1 11 25 65 47<br>Sorted Array<br>1 11 25 47 65'),
(82, 'TEST CASE 2', '7<br>14<br>83<br>25<br>47<br>9<br>77<br>1', '1 9 14 47 83 77 25<br>Sorted Array<br>1 9 14 25 47 77 83'),
(83, 'TEST CASE 1', '20<br>1<br>9<br>18<br>24<br>27<br>35<br>38<br>41<br>49<br>53<br>55<br>66<br>67<br>72<br>75<br>77<br>81<br>89<br>90<br>97<br>3<br>35<br>38<br>41', 'Sequence found between index 5 and 8'),
(83, 'TEST CASE 2', '20<br>1<br>9<br>18<br>24<br>27<br>35<br>38<br>41<br>49<br>53<br>55<br>66<br>67<br>72<br>75<br>77<br>81<br>89<br>90<br>97<br>3<br>35<br>38<br>40', 'Not found'),
(84, 'TEST CASE 1', '5<br>6 <br>7 <br>8 <br>13 <br>11<br>3', '6'),
(84, 'TEST CASE 2', '4<br>5 <br>3 <br>7<br>5<br>7', '7'),
(85, 'TEST CASE 1', '5<br>11 <br>22 <br>33 <br>66 <br>67', 'Sorted List:<br>[11, 22, 33, 66, 67]<br>Mid-term:<br>33'),
(85, 'TEST CASE 2', '6<br>11 <br>63 <br>4 <br>8 <br>99 <br>55', 'Sorted List:<br>[4, 8, 11, 55, 63, 99]<br>Mid-term:<br>11'),
(86, 'TEST CASE 1', '5<br>11 24 77 66 55', 'Sorted List:<br>[11, 24, 55, 66, 77]<br>Sequence of increments:<br>[13, 31, 11, 11]'),
(86, 'TEST CASE 2', '5<br>2 2 2 2 2', 'Sorted List:<br>[2, 2, 2, 2, 2]<br>Sequence of increments:<br>[0, 0, 0, 0]'),
(87, 'TEST CASE 1', '5<br>40<br>30<br>20<br>10<br>11', '10<br>11<br>20<br>30<br>40'),
(87, 'TEST CASE 2', '7<br>10<br>90<br>80<br>70<br>60<br>50<br>40', '10<br>40<br>50<br>60<br>70<br>80<br>90'),
(88, 'TEST CASE 1', '7<br>8<br>2<br>4<br>9<br>3<br>6<br>1', '1<br>2<br>3<br>4<br>6<br>8<br>9'),
(89, 'TEST CASE 1', '5<br>33 <br>99 <br>5 <br>11 <br>12', '[99, 33, 12, 11, 5]'),
(89, 'TEST CASE 2', '6<br>22 <br>45 <br>9 <br>43 <br>67 <br>55', '[67, 55, 45, 43, 22, 9]'),
(90, 'TEST CASE 1', '5<br>2<br>3<br>4<br>10<br>40<br>3', 'Element is present at index 1'),
(90, 'TEST CASE 2', '5<br>2<br>3<br>4<br>10<br>40<br>10', 'Element is present at index 3'),
(91, 'TEST CASE 1', 'sample.txt<br>4<br>eLab<br>eLab eLab<br>eLab eLab tool<br>eLab eLab eLab eLab tool<br>sample.txt<br>e', 'Occurrences of the letter<br>9'),
(91, 'TEST CASE 2', 'sample.txt<br>2<br>eLab eLab tool<br>eLab eLab eLab eLab tool<br>sample.txt<br>L', 'Occurrences of the letter<br>6'),
(92, 'TEST CASE 1', 'sample.txt<br>2<br>eLab is an auto evaluation tool<br>This file program in eLab will show you the count of words in the file except numbers like 1234567890<br>sample.txt', '99'),
(92, 'TEST CASE 2', 'sample.txt<br>3<br>eLab is an auto evaluation tool<br>This file program in eLab will show you the count of words in the file except numbers like 1234567890<br>2017 2016 2015 2018 eLab<br>sample.txt', '103'),
(93, 'TEST CASE 1', 'sample.txt<br>This is First Line<br>This is Second Line<br>This is Third Line<br>This is Fourth Line', 'This is First LineThis is Second LineThis is Third LineThis is Fourth Line'),
(93, 'TEST CASE 2', 'sample.txt<br>eLab <br>Tool <br>is an <br>auto evaluation tool', 'eLab Tool is an auto evaluation tool'),
(94, 'TEST CASE 1', 'sample.txt<br>2<br>eLab an auto evaluation tool in Tamilnadu<br>eLab will be launched in SWAYM platform soon<br>eLab', 'Occurrences of the word<br>2'),
(94, 'TEST CASE 2', 'sample.txt<br>4<br>eLab an auto evaluation tool in Tamilnadu - eLab<br>eLab will be launched in SWAYM platform soon - eLab<br>eLab is used by 45000+users every year- eLab<br>eLab is a copyleft tool - eLab<br>eLab', 'Occurrences of the word<br>8'),
(95, 'TEST CASE 1', 'sample.txt<br>4<br>eLab an auto evaluation tool in Tamilnadu - eLab<br>eLab will be launched in SWAYM platform soon - eLab<br>eLab is used by 45000+users every year- eLab<br>eLab is a copyleft tool - eLab<br>sample.txt', 'eLab is a copyleft tool - eLab<br>eLab is used by 45000+users every year- eLab<br>eLab will be launched in SWAYM platform soon - eLab<br>eLab an auto evaluation tool in Tamilnadu - eLab'),
(95, 'TEST CASE 2', 'sample.txt<br>2<br>eLab an auto evaluation tool in Tamilnadu<br>eLab will be launched in SWAYM platform soon<br>sample.txt', 'eLab will be launched in SWAYM platform soon<br>eLab an auto evaluation tool in Tamilnadu'),
(96, 'TEST CASE 1', 'sample.txt<br>5<br>This is First Line<br>This is Second Line<br>This is Third Line<br>This is Fourth Line<br>This is Fifth Line', 'This is First Line<br>This is Second Line<br>This is Third Line<br>This is Fourth Line<br>This is Fifth Line<br>Number of lines:<br>5'),
(96, 'TEST CASE 2', 'sample.txt<br>4<br>This is First Line<br>This is Second Line<br>This is Third Line<br>This is Fourth Line', 'This is First Line<br>This is Second Line<br>This is Third Line<br>This is Fourth Line<br>Number of lines:<br>4'),
(97, 'TEST CASE 1', 'sample.txt<br>4<br>This is First Line of the file<br>This is Second Line of the file create in eLab Server<br>This is Third Line sample line<br>This is fourth line of the file and eLab is an auto evaluation tool launched in 2017<br>sample.txt', 'This Is First Line Of The File<br>This Is Second Line Of The File Create In Elab Server<br>This Is Third Line Sample Line<br>This Is Fourth Line Of The File And Elab Is An Auto Evaluation Tool Launched In 2017'),
(97, 'TEST CASE 2', 'sample.txt<br>2<br>This is First Line of the file<br>This is Second Line of the file create in eLab Server<br>sample.txt', 'This Is First Line Of The File<br>This Is Second Line Of The File Create In Elab Server'),
(98, 'TEST CASE 1', 'sample.txt<br>2<br>eLab 1.0 launched in 2017<br>eLab 2.0 next version will be launched in 2019<br>sample.txt', '12'),
(98, 'TEST CASE 2', 'sample.txt<br>3<br>eLab 1.0 launched in 2017<br>eLab 2.0 next version will be launched in 2019<br>2016 2017 2018 2019 2020 2021<br>sample.txt', '36'),
(99, 'TEST CASE 1', 'sample.txt<br>5<br>This is First Line<br>This is Second Line<br>This is Third Line<br>This is Fourth Line<br>This is Fifth Line', 'This is First Line<br>This is Second Line<br>This is Third Line<br>This is Fourth Line<br>This is Fifth Line<br>Number of lines:<br>10'),
(99, 'TEST CASE 2', 'sample.txt<br>3<br>This is First Line<br>This is Second Line<br>This is Third Line', 'This is First Line<br>This is Second Line<br>This is Third Line<br>Number of lines:<br>6'),
(100, 'TEST CASE 1', 'sample.txt<br>4<br>eLab an auto evaluation tool in Tamilnadu - eLab<br>eLab will be launched in SWAYM platform soon - eLab<br>eLab is used by 45000+users every year- eLab<br>eLab is a copyleft tool - eLab<br>sample.txt', 'eLab is a copyleft tool - eLab<br>eLab is used by 45000+users every year- eLab<br>eLab will be launched in SWAYM platform soon - eLab<br>eLab an auto evaluation tool in Tamilnadu - eLab'),
(100, 'TEST CASE 2', 'sample.txt<br>2<br>eLab an auto evaluation tool in Tamilnadu<br>eLab will be launched in SWAYM platform soon<br>sample.txt', 'eLab will be launched in SWAYM platform soon<br>eLab an auto evaluation tool in Tamilnadu'),
(101, 'TEST CASE 1', '5<br>eggs sugar flour salt<br>sugar eggs milk flour<br>aa ab ac ad<br>ac ad ae af<br>cookies sugar grass lemon<br>lemon meat chili wood<br>one two three four<br>one two three four<br>gibberish jibberish lalalalala popopopopo<br>jibberisz gibberisz popopopopu lalalalalu', 'similar<br>similar<br>dissimilar<br>similar<br>dissimilar'),
(101, 'TEST CASE 2', '10<br>similar dissmiliar<br>similar dissmiliar<br>eLab eCurricula<br>eThink eLab<br>eLab eThink<br>eThink eVerify<br>eLab eCurricula<br>eCurricula eLab<br>eThink eVerify<br>eVerify eThink<br>similar dissmiliar<br>similar dissmiliar<br>eLab eCurricula<br>eThink eLab<br>eLab eThink<br>eThink eVerify<br>eLab eCurricula<br>eCurricula eLab<br>eThink eVerify<br>eVerify eThink', 'similar<br>dissimilar<br>dissimilar<br>similar<br>similar<br>similar<br>dissimilar<br>dissimilar<br>similar<br>similar'),
(102, 'TEST CASE 1', '3 <br>1203<br>10042<br>1312', '2406.0<br>20383.16<br>2624.0'),
(102, 'TEST CASE 2', '5<br>2512<br>9009<br>2011<br>2510<br>3212', '5473.76<br>18337.82<br>4481.78<br>5469.8<br>6859.76'),
(103, 'TEST CASE 1', '30 120.00', '89.50'),
(103, 'TEST CASE 2', '42 120.00', '120.00'),
(104, 'TEST CASE 1', '7 5', '9'),
(104, 'TEST CASE 2', '17 8', '1793'),
(105, 'TEST CASE 1', '2<br>5 2<br>11 3', '1<br>2'),
(105, 'TEST CASE 2', '10<br>2 2<br>5 7<br>3 4<br>12 7<br>5 4<br>5 2<br>98 6<br>109 110<br>123 156<br>10 2', '0<br>5<br>3<br>5<br>2<br>1<br>3<br>109<br>123<br>0'),
(106, 'TEST CASE 1', '7 3<br>1<br>51<br>966369<br>7<br>9<br>999996<br>11', '4'),
(107, 'TEST CASE 1', '4 <br>1<br>3<br>6<br>15', 'ODD<br>ODD<br>EVEN<br>ODD'),
(107, 'TEST CASE 2', '5<br>25<br>9<br>13<br>14<br>56', 'ODD<br>ODD<br>ODD<br>EVEN<br>EVEN'),
(108, 'TEST CASE 1', '2<br>1 4<br>2 3', '10<br>21'),
(108, 'TEST CASE 2', '5<br>1 4<br>2 3<br>3 6<br>3 7<br>1 8', '10<br>21<br>26796<br>82621<br>36'),
(109, 'TEST CASE 1', '3 <br>100 120<br>10 20<br>1200 20', '12000.000000<br>200.000000<br>21600.000000'),
(109, 'TEST CASE 2', '5<br>100 150<br>20 50<br>1400 10<br>2000 10<br>2500 15', '15000.000000<br>1000.000000<br>12600.000000<br>18000.000000<br>33750.000000'),
(110, 'TEST CASE 1', '4<br>A..A..B...B<br>..A..<br>A....A<br>..B..B..B..0', '4 5<br>1 0<br>6 0<br>0 7');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `elabdata`
--
ALTER TABLE `elabdata`
  ADD PRIMARY KEY (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
